use std::net::SocketAddr;
use std::sync::Arc;
use async_trait::async_trait;
use moduforge_state::{transaction::Command, Transaction};
use moduforge_transform::TransformResult;
use moduforge_collaboration::{
    Result, SyncService, YrsMiddleware, YrsManager, WebSocketServer,
};
use tokio::time::{sleep, Duration};
use tracing_subscriber;
use tokio::sync::Mutex;

use moduforge_core::{
    middleware::MiddlewareStack,
    node::Node,
    runtime::ForgeRuntime,
    types::{Extensions, RuntimeOptions},
};
use moduforge_macros::node;
use moduforge_model::{node_type::NodeEnum};

#[tokio::main]
async fn main() -> Result<()> {
    // ÂàùÂßãÂåñÊó•Âøó
    tracing_subscriber::fmt().with_max_level(tracing::Level::INFO).init();

    tracing::info!("üöÄ ÂêØÂä® ModuForge-RS Yrs ÂêåÊ≠•ÊúçÂä°ÊºîÁ§∫");

    // 1. ÂàõÂª∫Ê†∏ÂøÉÊúçÂä°
    let yrs_manager = Arc::new(YrsManager::new());
    let ws_server = Arc::new(WebSocketServer::new(yrs_manager.clone()));
    let sync_service =
        Arc::new(SyncService::new(yrs_manager, ws_server.clone()));

    // 2. ÂàõÂª∫Âπ∂ÈÖçÁΩÆ ForgeRuntime (Editor) - ‰ΩøÁî®MutexÂåÖË£Ö‰ª•ÊîØÊåÅÂèØÂèòËÆøÈóÆ
    let room_id = "demo-room".to_string();
    let runtime = Arc::new(Mutex::new(
        build_runtime(sync_service.clone(), room_id.clone()).await,
    ));

    // 4. ÂêØÂä® WebSocket ÊúçÂä°Âô®
    let ws_addr: SocketAddr = "127.0.0.1:8080".parse().unwrap();
    let _ =
        ws_server.start(ws_addr, sync_service.clone(), runtime.clone()).await;

    // 5. ÂêØÂä®‰∏Ä‰∏™‰ªªÂä°Êù•Ê®°ÊãüÂëΩ‰ª§Ôºå‰ª•Ëß¶Âèë‰∏≠Èó¥‰ª∂
    let runtime_clone_for_commands = runtime.clone();
    tokio::spawn(async move {
        let mut counter = 0;
        loop {
            sleep(Duration::from_secs(5)).await;
            counter += 1;

            tracing::info!("üîÑ ÊâßË°åÁ¨¨ {} Ê¨°ÊµãËØïÂëΩ‰ª§", counter);

            // ÊâßË°åÊµãËØïÂëΩ‰ª§ - Ëøô‰ºöËß¶Âèë YrsMiddleware
            tracing::info!("üîí ÂáÜÂ§áËé∑Âèñ runtime lock");
            let mut runtime_guard = runtime_clone_for_commands.lock().await;
            tracing::info!("üîì Â∑≤Ëé∑Âèñ runtime lockÔºåÂáÜÂ§áÊâßË°å command");
            
            match runtime_guard.command(Arc::new(TestCommand)).await {
                Ok(_) => tracing::info!("‚úÖ ÊµãËØïÂëΩ‰ª§ÊâßË°åÊàêÂäü"),
                Err(e) => tracing::error!("‚ùå ÊµãËØïÂëΩ‰ª§ÊâßË°åÂ§±Ë¥•: {}", e),
            }
            
            tracing::info!("üîì ÂáÜÂ§áÈáäÊîæ runtime lock");
            // runtime_guard Âú®ËøôÈáåËá™Âä®ÈáäÊîæ
        }
    });

    // Á≠âÂæÖÁî®Êà∑‰∏≠Êñ≠
    tokio::select! {
        _ = tokio::signal::ctrl_c() => {
            tracing::info!("üì¥ Êî∂Âà∞ÂÅúÊ≠¢‰ø°Âè∑ÔºåÊ≠£Âú®ÂÖ≥Èó≠ÊúçÂä°...");
        }
    }
    Ok(())
}

pub const DWGC_STR: &str = "DWGC";
pub const DXGC_STR: &str = "DXGC";
pub const GCXM_STR: &str = "GCXM";

fn nodes() -> Vec<Node> {
    let mut GCXM: Node = node!(GCXM_STR, "Â∑•Á®ãÈ°πÁõÆ", &format!("{}+", DXGC_STR));
    GCXM.set_top_node();
    let DXGC: Node =
        node!(DXGC_STR, "ÂçïÈ°πÂ∑•Á®ã", &format!("({}|{})+", DWGC_STR, DXGC_STR));
    let DWGC: Node = node!(DWGC_STR, "Âçï‰ΩçÂ∑•Á®ã");
    vec![GCXM, DXGC, DWGC]
}

async fn build_runtime(
    sync_service: Arc<SyncService>,
    room_id: String,
) -> ForgeRuntime {
    let nodes = nodes();
    let mut runtime_options = RuntimeOptions::default();
    for node in nodes {
        runtime_options = runtime_options.add_extension(Extensions::N(node));
    }
    // 3. ËÆæÁΩÆ‰∏≠Èó¥‰ª∂‰ª•ËøûÊé• Runtime Âíå SyncService
    let mut middleware_stack = MiddlewareStack::new();
    middleware_stack
        .add(YrsMiddleware { sync_service: sync_service.clone(), room_id });
    runtime_options = runtime_options.set_middleware_stack(middleware_stack);
    ForgeRuntime::create(runtime_options).await.unwrap()
}

#[derive(Debug)]
struct TestCommand;

#[async_trait]
impl Command for TestCommand {
    async fn execute(
        &self,
        tr: &mut Transaction,
    ) -> TransformResult<()> {
        let root_id = tr.doc().root_id().clone();
        let dxgc = tr.schema.nodes[DXGC_STR].clone();
        let dxgc_node = dxgc.create(None, None, Vec::new(), None);
        tr.add_node(root_id, vec![NodeEnum(dxgc_node, vec![])])?;
        Ok(())
    }
    fn name(&self) -> String {
        "TestCommand".to_string()
    }
}
