use std::net::SocketAddr;
use std::sync::Arc;
use async_trait::async_trait;
use moduforge_state::{transaction::Command, Transaction};
use moduforge_transform::TransformResult;
use moduforge_transmission::{Result, SyncService, YrsMiddleware};
use tokio::time::{sleep, Duration};
use tracing_subscriber;

#[tokio::main]
async fn main() -> Result<()> {
    // ÂàùÂßãÂåñÊó•Âøó
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    tracing::info!("üöÄ ÂêØÂä® ModuForge-RS Yrs ÂêåÊ≠•ÊúçÂä°ÊºîÁ§∫");

    // ÂàõÂª∫ÂêåÊ≠•ÊúçÂä°
    let sync_service = Arc::new(SyncService::new());

    // ÂêØÂä® WebSocket ÊúçÂä°Âô®
    let ws_addr: SocketAddr = "127.0.0.1:8080".parse().unwrap();
    let _ws_handle = sync_service.start(ws_addr).await?;

    // ËÆæÁΩÆÊàøÈó¥ID
    let room_id = "demo-room".to_string();
    let mut editor_for_commands = build_editor(sync_service.clone(), room_id).await; // ÂàõÂª∫‰∏ìÈó®Áî®‰∫éÂëΩ‰ª§ÁöÑeditor
    tokio::spawn(async move {
        let mut counter = 0;
        loop {
            sleep(Duration::from_secs(30)).await;
            counter += 1;
            
            tracing::info!("üîÑ ÊâßË°åÁ¨¨ {} Ê¨°ÊµãËØïÂëΩ‰ª§", counter);
            
            // ÊâßË°åÊµãËØïÂëΩ‰ª§ - Ëøô‰ºöËß¶Âèë‰∏≠Èó¥‰ª∂
            match editor_for_commands.command(Arc::new(TestCommand)).await {
                Ok(_) => {
                    tracing::info!("‚úÖ ÊµãËØïÂëΩ‰ª§ÊâßË°åÊàêÂäü");
                }
                Err(e) => {
                    tracing::error!("‚ùå ÊµãËØïÂëΩ‰ª§ÊâßË°åÂ§±Ë¥•: {}", e);
                }
            }
        }
    });

    // Á≠âÂæÖÁî®Êà∑‰∏≠Êñ≠
    tokio::select! {
        _ = tokio::signal::ctrl_c() => {
            tracing::info!("üì¥ Êî∂Âà∞ÂÅúÊ≠¢‰ø°Âè∑ÔºåÊ≠£Âú®ÂÖ≥Èó≠ÊúçÂä°...");
        }
        _ = sleep(Duration::from_secs(600)) => {
            tracing::info!("‚è∞ ÊºîÁ§∫Êó∂Èó¥Âà∞ÔºåËá™Âä®ÂÖ≥Èó≠ÊúçÂä°");
        }
    }
    
    tracing::info!("üëã ÊºîÁ§∫ÁªìÊùü");
    Ok(())
}

pub const DWGC_STR: &str = "DWGC";
pub const DXGC_STR: &str = "DXGC";
pub const GCXM_STR: &str = "GCXM";

use moduforge_core::{middleware::MiddlewareStack, node::Node, runtime::ForgeRuntime, types::{Extensions, RuntimeOptions}};
use moduforge_macros::node;
use moduforge_model::{node_type::NodeEnum, schema::AttributeSpec};

fn nodes() -> Vec<Node>{
    let mut GCXM: Node = node!(GCXM_STR, "Â∑•Á®ãÈ°πÁõÆ", &format!("{}+", DXGC_STR));
    GCXM.set_top_node();
    let DXGC: Node = node!(DXGC_STR, "ÂçïÈ°πÂ∑•Á®ã", &format!("({}|{})+", DWGC_STR, DXGC_STR));
    let DWGC: Node = node!(DWGC_STR, "Âçï‰ΩçÂ∑•Á®ã");
    vec![GCXM, DXGC, DWGC]
}


async fn build_editor(sync_service: Arc<SyncService>, room_id: String) -> ForgeRuntime{
    let nodes = nodes();
    let mut runtime_options = RuntimeOptions::default();
    for node in nodes {
        runtime_options = runtime_options.add_extension(Extensions::N(node));
    }
    let mut middleware_stack = MiddlewareStack::new();
    middleware_stack.add(YrsMiddleware{sync_service, room_id });
    runtime_options =runtime_options.set_middleware_stack(middleware_stack);
    let runtime = ForgeRuntime::create(runtime_options).await.unwrap();
    runtime
}
#[derive(Debug)]
struct TestCommand;
#[async_trait]
impl Command for TestCommand{
    async fn execute(
        &self,
        tr: &mut Transaction,
    ) -> TransformResult<()> {
       let root_id = tr.doc().root_id().clone();
       let dxgc = tr.schema.nodes[DXGC_STR].clone();
       let dxgc_node = dxgc.create(None, None, Vec::new(), None);
       tr.add_node(root_id, vec![NodeEnum(dxgc_node,vec![])])?;
        Ok(())
    }
    fn name(&self) -> String {
        "TestCommand".to_string()
    }
}