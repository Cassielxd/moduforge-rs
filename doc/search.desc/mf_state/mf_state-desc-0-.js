searchState.loadedDescShard("mf_state", 0, "ModuForge-RS 状态管理模块\nConstructs an event at the debug level.\nConstructs an event at the error level.\nConstructs an event at the info level.\n初始化日志系统\nConstructs an event at the warn level.\nContains the error value\nContains the success value\nA type alias for Result that uses anyhow::Error as the …\nHelper functions for creating common error types\nCreates a configuration error\nCreates a deserialization error\nCreates a field operation error\nCreates an invalid plugin state error\nCreates a plugin apply error\nCreates a plugin initialization error\nCreates a plugin not found error\nCreates a schema error\nCreates a serialization error\nCreates a transaction error\nReturns the argument unchanged.\n检查状态容器中是否包含指定类型的数据\nCalls <code>U::from(self)</code>.\n将数据存入状态容器中\n从状态容器中移除并返回指定类型的数据\n获取当前日志级别\n初始化日志系统\n设置日志级别\n全局资源管理器 …\n清理所有资源 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n创建新的全局资源管理器实例\n插件配置\n插件元数据 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n循环依赖报告\n依赖管理器\n缺失依赖报告\n添加依赖关系\n添加插件节点\n检查缺失的依赖 - 直接从图中提取\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取插件的所有依赖（包括间接依赖）\n获取所有缺失的依赖名称\n获取循环依赖\n获取循环依赖的详细报告\n获取插件的直接依赖\n获取拓扑排序\n检查循环依赖\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n生成人类可读的报告\n生成人类可读的报告\n插件管理器\n验证插件依赖\nReturns the argument unchanged.\n获取排序后的插件 按照依赖关系排序\nCalls <code>U::from(self)</code>.\n检查初始化状态\n注册插件\n插件实例结构体 表示一个具体的插件实例\n插件规范结构体 定义插件的配置和行为\n插件特征 …\nPluginTrait实现一个 default 实现 状态字段特征 …\n追加事务处理 …\n应用状态变更 根据事务内容更新插件状态\n应用事务追加逻辑\n应用事务过滤逻辑\n获取插件配置（静态配置）- 提供默认实现\n反序列化插件状态\n事务过滤 决定是否允许事务执行\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取插件配置\n获取插件元数据\n获取插件名称\n从全局状态中获取插件状态\n初始化插件状态\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n获取插件元数据（静态信息）- 提供默认实现\n创建新的插件实例\n序列化插件状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n配置结构体，存储编辑器的核心配置信息\nState 结构体代表编辑器的整体状态\n状态配置结构体，用于初始化编辑器状态\n异步应用事务到当前状态\n异步应用内部事务\n异步应用事务到当前状态\n创建新的编辑器状态\n反序列化状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n根据配置创建新的状态实例\n获取插件列表\n获取资源管理器\n获取结构定义\n序列化状态\n获取已排序的插件列表 …\n定义可执行的命令接口 要求实现 Send + Sync …\n事务结构体，用于管理文档的修改操作\n添加标记 id: 节点ID marks: 要添加的标记\n添加新节点 parent_id: 父节点ID node: …\n获取当前文档状态\nReturns the argument unchanged.\n获取元数据 key: 键 返回: Option&lt;…\n事务的时间戳\nCalls <code>U::from(self)</code>.\n存储元数据的哈希表，支持任意类型数据\n创建新的事务实例 state: 当前状态对象 返回: …\n删除标记 id: 节点ID marks: 要删除的标记\n删除节点 id: 节点ID nodes: 要删除的节点\n设置元数据 key: 键 value: 值（支持任意类型）\n设置节点属性 id: 节点ID values: 属性键值对")