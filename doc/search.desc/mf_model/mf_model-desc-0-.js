searchState.loadedDescShard("mf_model", 0, "ModuForge-RS 数据模型模块\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n根据内容匹配规则推导需要的节点类型\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nA type alias for Result that uses anyhow::Error as the …\nHelper functions for creating node pool errors\nError messages for node pool operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn unordered map.\nAn unordered set.\nAn ordered map.\nAn ordered set.\nA persistent vector.\nType alias for <code>GenericHashMap</code> that uses …\nType alias for <code>GenericHashSet</code> that uses …\nType alias for <code>GenericOrdMap</code> that uses <code>DefaultSharedPtr</code> as …\nType alias for <code>GenericOrdSet</code> that uses <code>DefaultSharedPtr</code> as …\nType alias for <code>GenericVector</code> that uses <code>DefaultSharedPtr</code> as …\nConcatenate two vectors.\nConcatenate two vectors.\nUpdate the value for a given key by calling a function with\nUpdate the value for a given key by calling a function with\nAppend the vector <code>other</code> to the end of the current vector.\nGet the last element of a vector.\nGet a mutable reference to the last element of a vector.\nBinary search a sorted vector for a given element.\nBinary search a sorted vector for a given element using a …\nBinary search a sorted vector for a given element with a …\nDiscard all elements from the map.\nDiscard all elements from the set.\nDiscard all elements from the map.\nDiscard all elements from the set.\nDiscard all elements from the vector.\nClone a map.\nClone a set.\nClone a map.\nClone a set.\nClone a vector.\nTest if a value is part of a set.\nTest if a value is part of a set.\nTest if a given element is in the vector.\nTest for the presence of a key in a map.\nTest for the presence of a key in a hash map.\nGet an iterator over the differences between this map and …\nGet an iterator over the differences between this set and …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nGet the <code>Entry</code> for a key in the map for in-place …\nGet the <code>Entry</code> for a key in the map for in-place …\nAdd values to the end of a vector by consuming an iterator.\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nConstruct a <code>Focus</code> for a vector.\nConstruct a <code>FocusMut</code> for a vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a vector from a <code>std::vec::Vec</code>.\nCreate a vector from a <code>std::vec::Vec</code>.\nReturns the argument unchanged.\nCreate a vector from an iterator.\nGet the first element of a vector.\nGet a mutable reference to the first element of a vector.\nGet the value for a key from a map.\nReturns a reference to the element in the set, if any, …\nGet the value for a key from a hash map.\nGet a reference to the value at index <code>index</code> in a vector.\nGet a value inside multiple levels of data structures.\nGet the key/value pair for a key from a map.\nGet the key/value pair for a key from a hash map.\nGet the key/value pair for a key from a map.\nGet the key/value pair for a key from a hash map, …\nGet the largest key in a map, along with its value. If the …\nGet the largest value in a set.\nGet the smallest key in a map, along with its value. If the\nGet the smallest value in a set.\nGet a mutable reference to the value for a key from a map.\nGet a mutable reference to the value for a key from a hash …\nGet a mutable reference to the value at index <code>index</code> in a …\nGet a reference to the closest larger entry in a map to a …\nGet the closest larger value in a set to a given value.\nGet the closest larger entry in a map to a given key as a …\nGet a reference to the closest smaller entry in a map to a …\nGet the closest smaller value in a set to a given value.\nGet the closest smaller entry in a map to a given key as a …\nGet a reference to the map’s <code>BuildHasher</code>.\nGet a reference to the set’s <code>BuildHasher</code>.\nAn unordered map.\nConstruct a hash map from a sequence of key/value pairs.\nAn unordered set.\nConstruct a set from a sequence of values.\nGet the first element of a vector.\nGet a reference to the value at index <code>index</code> in the vector.\nGet a mutable reference to the value at index <code>index</code> in the …\nGet the index of a given element in the vector.\nInsert a key/value mapping into a map.\nInsert a value into a set.\nInsert a key/value mapping into a map.\nInsert a value into a set.\nInsert an element into a vector.\nInsert an element into a sorted vector.\nInsert an element into a sorted vector using a comparator …\nInsert an element into a sorted vector where the …\nConstruct the intersection of two maps, keeping the values …\nConstruct the intersection of two sets.\nConstruct the intersection of two maps, keeping the values …\nConstruct the intersection of two sets.\nConstruct the intersection of two maps, calling a function …\nConstruct the intersection of two maps, calling a function …\nConstruct the intersection of two maps, calling a function …\nConstruct the intersection of two maps, calling a function …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest whether a map is empty.\nTest whether a set is empty.\nTest whether a hash map is empty.\nTest whether a set is empty.\nTest whether a vector is empty.\nTest whether a vector is currently inlined.\nTest whether a map is a proper submap of another map, …\nTest whether a map is a proper submap of another map, …\nTest whether a map is a proper submap of another map, …\nTest whether a map is a proper submap of another map, …\nTest whether a set is a proper subset of another set, …\nTest whether a set is a proper subset of another set, …\nTest whether a map is a submap of another map, meaning that\nTest whether a map is a submap of another map, meaning that\nTest whether a map is a submap of another map, meaning that\nTest whether a map is a submap of another map, meaning that\nTest whether a set is a subset of another set, meaning that\nTest whether a set is a subset of another set, meaning that\nIterators over immutable data.\nGet an iterator over the key/value pairs of a map.\nCreate an iterator over the contents of the set.\nGet an iterator over the key/value pairs of a hash map.\nGet an iterator over the values in a hash set.\nGet an iterator over a vector.\nGet a mutable iterator over the values of a hash map.\nGet a mutable iterator over a vector.\nGet an iterator over a map’s keys.\nGet an iterator over a hash map’s keys.\nGet the last element of a vector.\nGet an iterator over the leaf nodes of a vector.\nGet a mutable iterator over the leaf nodes of a vector. …\nGet the size of a map.\nGet the size of a set.\nGet the size of a hash map.\nGet the size of a set.\nGet the length of a vector.\nConstruct an empty map.\nConstruct an empty set.\nConstruct an empty hash map.\nConstruct an empty set.\nConstruct an empty vector.\nConstruct an empty hash map using the same hasher as the …\nConstruct an empty hash set using the same hasher as the …\nAn ordered map.\nConstruct a map from a sequence of key/value pairs.\nAn ordered set.\nConstruct a set from a sequence of values.\nRemove the last element from a vector and return it.\nRemove the first element from a vector and return it.\nTest whether two maps refer to the same content in memory.\nTest whether two sets refer to the same content in memory.\nTest whether two maps refer to the same content in memory.\nTest whether two sets refer to the same content in memory.\nTest whether two vectors refer to the same content in …\nPush a value to the back of a vector.\nPush a value to the front of a vector.\nCreate an iterator over a range of key/value pairs.\nCreate an iterator over a range inside the set.\nConstruct the relative complement between two maps by …\nConstruct the relative complement between two sets, that …\nConstruct the relative complement between two maps by …\nConstruct the relative complement between two sets, that …\nRemove a key/value mapping from a map if it exists.\nRemove a value from a set.\nRemove a key/value pair from a map, if it exists, and …\nRemove a value from a set if it exists.\nRemove an element from a vector.\nRemove the largest value from a set.\nRemove the smallest value from a set.\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nFilter out values from a map which don’t satisfy a …\nFilter out values from a set which don’t satisfy a …\nRetain only the elements specified by the predicate.\nUpdate the value at index <code>index</code> in a vector.\nAbout shared pointers. Re-export the <code>archery</code> crate.\nConstruct a map with the <code>n</code> smallest keys removed from a …\nConstruct a set with the <code>n</code> smallest values removed from a …\nConstruct a vector with <code>count</code> elements removed from the …\nExtract a slice from a vector.\nSort a vector.\nSort a vector using a comparator function.\nSplit a map into two, with the left hand map containing …\nSplit a set into two, with the left hand set containing …\nSplit a vector at a given index.\nSplit a map into two, with the left hand map containing …\nSplit a set into two, with the left hand set containing …\nSplit a vector at a given index.\nSwap the elements at indices <code>i</code> and <code>j</code>.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct a map with only the <code>n</code> smallest keys from a given …\nConstruct a set with only the <code>n</code> smallest values from a …\nConstruct a vector of the first <code>count</code> elements from the …\nTruncate a vector to the given size.\nConstruct the union of two maps, keeping the values in the …\nConstruct the union of two sets.\nConstruct the union of two maps, keeping the values in the …\nConstruct the union of two sets.\nConstruct the union of two maps, using a function to decide\nConstruct the union of two maps, using a function to decide\nConstruct the union of two maps, using a function to decide\nConstruct the union of two maps, using a function to decide\nConstruct the union of a sequence of maps, selecting the …\nConstruct the union of multiple sets.\nConstruct the union of a sequence of maps, selecting the …\nConstruct the union of multiple sets.\nConstruct the union of a sequence of maps, using a …\nConstruct the union of a sequence of maps, using a …\nConstruct the union of a sequence of maps, using a …\nConstruct the union of a sequence of maps, using a …\nConstruct a map with a single mapping.\nConstruct a set with a single value.\nConstruct a hash map with a single mapping.\nConstruct a set with a single value.\nConstruct a vector with a single value.\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new set from the current set with the given …\nConstruct a new hash map by inserting a key/value mapping …\nConstruct a new set from the current set with the given …\nCreate a new vector with the value at index <code>index</code> updated.\nUpdate a value inside multiple levels of data structures.\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new hash map by inserting a key/value mapping …\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new map by inserting a key/value mapping into a\nGet an iterator over a map’s values.\nGet an iterator over a hash map’s values.\nA persistent vector.\nConstruct a vector from a sequence of elements.\nConstruct an empty hash map using the provided hasher.\nConstruct an empty hash set using the provided hasher.\nRemove a key/value pair from a map, if it exists.\nConstruct a new set with the given value removed if it’s …\nConstruct a new map without the given key.\nConstruct a new set with the given value removed if it’s …\nRemove the largest key from a map, and return its value as …\nRemove the largest value from a set, and return that value …\nRemove the largest key from a map, and return that key, its\nRemove the smallest key from a map, and return its value as\nRemove the smallest value from a set, and return that …\nRemove the smallest key from a map, and return that key, …\nA consuming iterator over the elements of a map.\nA handle for a key and its associated value.\nAn unordered map.\nType alias for <code>GenericHashMap</code> that uses …\nAn iterator over the elements of a map.\nA mutable iterator over the elements of a map.\nAn iterator over the keys of a map.\nAn entry which exists in the map.\nAn entry for a mapping that already exists in the map.\nAn entry which doesn’t exist in the map.\nAn entry for a mapping that does not already exist in the …\nAn iterator over the values of a map.\nCall the provided function to modify the value if the value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value.\nGet a mutable reference to the current value.\nOverwrite the current value.\nInsert a value into this entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this entry into its key.\nConvert this entry into a mutable reference.\nGet the key for this entry.\nGet the key for this entry.\nGet the key for this entry.\nInsert a default value if there was no value already, and …\nInsert the default value provided if there was no value …\nInsert the default value from the provided function if …\nRemove this entry from the map and return the removed …\nRemove this entry from the map and return the removed …\nA consuming iterator over the elements of a set.\nAn unordered set.\nType alias for <code>GenericHashSet</code> that uses …\nAn iterator over the elements of a set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an iterator of values using a function to update an …\nThis value has been added to the new map.\nA consuming iterator over the elements of a map.\nA description of a difference between two ordered maps.\nAn iterator over the differences between two maps.\nA handle for a key and its associated value.\nAn ordered map.\nAn iterator over the key/value pairs of a map.\nAn iterator ove the keys of a map.\nAn entry which exists in the map.\nAn entry for a mapping that already exists in the map.\nType alias for <code>GenericOrdMap</code> that uses <code>DefaultSharedPtr</code> as …\nAn iterator over a range of key/value pairs in a map.\nThis value has been removed from the new map.\nThis value has been changed between the two maps.\nAn entry which doesn’t exist in the map.\nAn entry for a mapping that does not already exist in the …\nAn iterator over the values of a map.\nCall the provided function to modify the value if the value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value.\nGet a mutable reference to the current value.\nOverwrite the current value.\nInsert a value into this entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this entry into its key.\nConvert this entry into a mutable reference.\nGet the key for this entry.\nGet the key for this entry.\nGet the key for this entry.\nInsert a default value if there was no value already, and …\nInsert the default value provided if there was no value …\nInsert the default value from the provided function if …\nRemove this entry from the map and return the removed …\nRemove this entry from the map and return the removed …\nThe new value.\nThe old value.\nThis value has been added to the new set.\nA consuming iterator over the elements of a set.\nA description of a difference between two ordered sets.\nAn iterator over the difference between two sets.\nAn ordered set.\nAn iterator over the elements of a set.\nType alias for <code>GenericOrdSet</code> that uses <code>DefaultSharedPtr</code> as …\nA ranged iterator over the elements of a set.\nThis value has been removed from the new set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nType constructors for <code>Arc</code> pointers.\nDefault shared pointer used in data structures like …\nType constructors for <code>Rc</code> pointers.\nPointer to shared data with reference-counting.\nTrait for type constructors of reference-counting pointers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the leaf nodes of a vector.\nA mutable iterator over the leaf nodes of a vector.\nA consuming iterator over vectors with values of type <code>A</code>.\nFocused indexing over a <code>Vector</code>.\nA mutable version of <code>Focus</code>.\nA persistent vector.\nAn iterator over vectors with values of type <code>A</code>.\nA mutable iterator over vectors with values of type <code>A</code>.\nType alias for <code>GenericVector</code> that uses <code>DefaultSharedPtr</code> as …\nGet the chunk for the given index.\nGet the chunk for the given index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the value at a given index.\nGet a reference to the value at a given index.\nGet a mutable reference to the value at a given index.\nGet a reference to the value at a given index.\nGet a reference to the value at a given index.\nGet a mutable reference to the value at a given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the focused <code>Vector</code> is empty.\nTest if the focused <code>Vector</code> is empty.\nGet the length of the focused <code>Vector</code>.\nGet the length of the focused <code>Vector</code>.\nNarrow the focus onto a subslice of the vector.\nNarrow the focus onto a subslice of the vector.\nConstruct a <code>Focus</code> for a <code>Vector</code>.\nConstruct a <code>FocusMut</code> for a <code>Vector</code>.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nRemove and return an element from the back of the iterator.\nRemove and return an element from the back of the iterator.\nRemove and return an element from the back of the iterator.\nRemove and return an element from the back of the iterator.\nLookup two indices simultaneously and run a function over …\nUpdate the value at a given index.\nSplit the focus into two.\nSplit the focus into two.\nSwap the values at two given indices.\nLookup three indices simultaneously and run a function …\nConvert a <code>FocusMut</code> into a <code>Focus</code>.\n基础标记实现 例如颜色 背景色 批注 @property …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n基础节点定义，任何数据都可以认为是节点\n添加多个标记 …\n获取子节点数量\nReturns the argument unchanged.\n在末尾插入一个子节点\n在指定位置插入子节点\n在末尾插入多个子节点\nCalls <code>U::from(self)</code>.\n创建一个新的节点实例\n移除指定类型的标记\n移除指定名称的标记\n更新节点属性\n缓存命中率统计\n懒加载查询引擎配置\n实时构建的懒加载查询引擎\n线程安全的节点池封装\n优化的查询引擎\n查询缓存配置\n查询条件枚举\n查询条件构建器\n查询统计信息\n查询统计摘要\n获取完整祖先链\n按祖先节点类型查询\n按属性值查询\n按子节点数量查询\n按深度查询\n按深度查询（使用索引）\n懒加载深度索引\n按后代节点类型查询\n按标记查询\n按标记查询（使用索引）\n懒加载标记索引\n按节点类型查询\n按类型查询（使用索引）\n懒加载类型索引\n缓存大小\n是否启用缓存\n缓存大小\n获取直接子节点列表\n组合查询（支持索引优化）\n检查节点是否存在\n执行查询并返回匹配的节点数量\n递归获取所有子节点（深度优先）\n是否启用缓存\n根据类型筛选节点\n执行查询并返回所有匹配的节点\n执行查询并返回第一个匹配的节点\n查找第一个匹配节点\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从节点列表构建节点池\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取节点的所有兄弟节点（包括自身）\n获取左边的所有节点\n获取左边的所有节点 根据下标\n获取两个节点的最近公共祖先\n根据ID获取节点(immutable)\n获取节点在树中的深度\n获取从根节点到目标节点的完整路径\n获取查询统计信息\n获取右边的所有节点\n获取右边边的所有节点 根据下标\n…\n…\n索引缓存大小\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查一个节点是否是另一个节点的祖先\n检查节点是否为叶子节点\n获取节点池的唯一标识符\n创建懒加载查询引擎\n创建新的查询引擎实例\n创建优化查询引擎（带缓存）\n并行批量查询节点\n并行执行查询并返回匹配的节点数量\n并行执行查询并返回所有匹配的节点\n并行执行查询并返回第一个匹配的节点\n并行查询节点\n并行查询并转换结果\n并行查询并聚合结果\n获取父节点ID\n组合查询（使用索引和缓存）\n创建查询引擎实例\n获取从根节点到目标节点的完整路径\n获取节点池中节点总数\n…\n验证父子关系一致性\n定义节点类型的约束规范\n…\n节点支持的属性集合（属性名 -&gt; 属性定义）\n属性规范定义（属性名 -&gt; 属性规范）\n验证节点属性是否符合规范\n验证节点内容是否符合类型约束\n将原始节点规范编译为可用的节点类型集合\n内容约束表达式（例如：“*”）\n内容匹配规则，定义允许的子节点结构\n创建节点\n创建节点并填充内容\n节点属性的默认值集合\n节点类型的描述信息\n类型描述信息\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n所属的逻辑分组\n节点所属的逻辑分组\n检查节点是否包含必须的属性\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n允许附加的Mark类型集合\n节点类型的唯一标识符（例如：“dw”, “dxgc…\n创建新的节点类型实例\n节点类型的详细配置规范\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n属性定义结构体 …\n属性规范定义\nSchema 结构体定义 …\nSchema 规范定义 …\n全局缓存\n编译 Schema 定义 …\n计算属性值 …\n属性的默认值\n获取属性的默认值映射 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查属性是否为必需的 …\n标记类型映射表\n创建新的 Schema 实例\n节点类型映射表\nSchema 的规范定义\n顶级节点类型\n向树中添加新的节点及其子节点\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n根据下标删除\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")