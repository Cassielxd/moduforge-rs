searchState.loadedDescShard("mf_core", 0, "ModuForge-RS 核心模块\n统一配置管理模块\n重命名\nXML Schema 解析与序列化模块\n重命名\n重命名\n缓存配置\n配置验证错误\n配置冲突\n自定义环境\n开发环境 - 较长超时时间，详细日志\n运行环境类型\n事件系统配置\n扩展系统配置\n统一的 Forge 配置结构\n配置构建器\n历史记录配置\n无效的配置值\n缺少必需的配置\n性能监控配置\n任务处理器配置\n生产环境 - 较短超时时间，精简日志\n测试环境 - 中等超时时间，适度日志\n事件批处理大小\n构建配置并验证\n构建配置但不验证（用于测试或特殊情况）\n创建配置构建器\n缓存配置\n设置缓存配置\n缓存清理间隔\n任务清理超时时间（用于优雅关闭）\n开发环境配置\n是否启用历史记录压缩\n是否启用详细性能日志\n是否启用扩展热重载\n是否启用增量快照\n是否启用 LRU 淘汰策略\n启用/禁用性能监控\n是否启用性能监控\n是否启用事件持久化\n是否启用扩展沙箱\n是否启用XML schema自动重载\n缓存条目过期时间\n设置运行环境\n运行环境\n事件系统配置\n设置事件配置\n扩展系统配置\n设置扩展配置\n为指定环境创建配置\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从现有配置创建构建器\n从环境变量加载配置覆盖\n从 JSON 字符串加载配置\n获取环境特定的配置调整建议\n事件处理超时时间\n历史记录配置\n设置历史记录配置\n设置历史记录最大条数\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n扩展加载超时时间\n性能日志记录阈值（毫秒）\n事件处理器最大并发数\n设置最大并发任务数\n最大并发任务数\n历史记录最大条数\n缓存最大条目数\n扩展最大内存使用量（MB）\n设置任务队列大小\n任务队列的最大容量\n事件队列最大大小\n最大重试次数\n合并另一个配置，优先使用 other 的非默认值\n性能指标采样率（0.0-1.0）\n设置中间件超时时间\n中间件执行超时时间（毫秒）\n创建新的配置构建器\n性能监控配置\n设置性能配置\n历史记录持久化间隔\n任务处理器配置\n设置处理器配置\n生产环境配置\n重试延迟时间\n任务接收超时时间（毫秒）\n设置任务超时时间\n单个任务的最大执行时间\n测试环境配置\n将配置序列化为 JSON 字符串\n验证配置的合理性\nXML解析超时时间\nXML schema文件路径列表\n缓存相关错误\n并发错误\n配置相关错误\n引擎相关错误\nContains the error value\n事件系统相关错误\n扩展和插件相关错误\n外部依赖错误\n统一的 Forge 错误类型\n错误结果类型别名\n历史记录相关错误\n内部错误（不应该发生的错误）\n中间件相关错误\nContains the success value\n兼容性错误，用于包装其他错误类型\n资源不足错误\n状态管理相关错误\n存储相关错误\n超时错误\n事务处理相关错误\n验证错误\n获取错误代码，用于程序化处理\n错误构造工具函数\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n检查错误是否可重试\n检查错误是否为临时性错误\n创建缓存错误\n创建并发错误\n创建配置错误\n创建带配置键的配置错误\n创建引擎错误\n创建事件错误\n创建带源错误的事件错误\n创建扩展错误\n创建带扩展名称的扩展错误\n创建外部依赖错误\n创建历史记录错误\n创建内部错误\n创建带位置信息的内部错误\n将任意错误转换为 ForgeError\n创建中间件错误\n创建带中间件名称的中间件错误\n创建带源错误的中间件错误\n…\n创建资源不足错误\n创建带使用量信息的资源不足错误\n创建运行时错误\n创建状态错误\n创建带源错误的状态错误\n创建存储错误\n创建超时错误\n创建带超时时间的超时错误\n创建事务错误\n创建带事务ID的事务错误\n创建验证错误\n创建带字段信息的验证错误\n高性能事件总线\n事件总线性能报告\n事件总线统计信息\n事件处理器 ID 类型\n当前活跃处理器数量\n当前活跃处理器数量\n添加事件处理器，返回处理器 ID\n批量添加事件处理器\n同步广播事件（仅在非异步上下文中使用）\n清空所有事件处理器\n异步销毁事件总线\n…\n已处理事件总数\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取事件配置\n获取详细的性能报告\n获取事件总线统计信息\n获取当前活跃的处理器数量\n处理器注册表大小\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n事件处理失败次数\n事件处理超时次数\n移除事件处理器\n批量移除事件处理器\n重置统计信息\n启动事件循环\n成功率（百分比）\n已处理事件总数\n处理失败总数\n处理超时总数\n…\n扩展实现 组装全局属性和插件\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n扩展管理器\nExtensionManager构建器\n添加代码定义的扩展\n动态添加扩展并重新构建schema\n批量添加代码定义的扩展\n添加从快照恢复的插件\n动态添加XML内容扩展\n添加XML内容字符串\n批量添加XML内容字符串\n动态添加XML文件扩展\n添加XML文件路径\n批量添加XML文件路径\n构建ExtensionManager\n创建ExtensionManager构建器\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\n从XML文件创建ExtensionManager（便捷方法）\n从多个XML文件创建ExtensionManager（便捷方法）\n从XML字符串创建ExtensionManager（便捷方法）\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的构建器\n创建文档\n根据已解析的扩展列表生成完整的 Schema\n历史记录结构体\n历史管理器\n检查是否可以重做（向未来跳转）\n检查是否可以撤销（向过去跳转）\n清空历史记录\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取未来状态的数量\n获取历史配置\n安全地获取未来状态\n获取历史记录\n获取历史记录长度\n安全地获取过去状态\n获取当前状态\n插入新状态\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n通用跳转方法\n跳转到未来状态\n跳转到过去状态\n创建新的历史记录\n创建新的历史管理器\n获取过去状态的数量\n更新历史配置\n验证历史记录的完整性\n使用配置创建历史管理器\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n已执行命令总数\n编辑器创建耗时（秒）\n已分发事件总数\n已加载扩展总数\n插件管理器创建耗时（秒）\n历史操作（撤销/重做）总数\n中间件执行耗时（秒）\n已加载插件总数\n当前正在处理的任务数\n当前任务队列大小\n快照恢复耗时（秒）\n快照运行时创建耗时（秒）\n已处理任务总数\n任务重试总数\n已提交任务总数\n任务处理耗时（秒）\n已分发事务总数\nXML解析耗时（秒）\n用于事务处理的中间件类型别名\n可以用于事务处理的中间件 trait\nMiddleware stack that holds multiple middleware\n在核心分发之后处理结果 …\n在事务到达核心分发之前处理事务\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n返回中间件的名称\nContains the error value\n基础标记实现 例如颜色 背景色 批注 @property …\n基础节点定义，任何数据都可以认为是节点\n线程安全的节点池封装\n…\nContains the success value\nA type alias for Result that uses anyhow::Error as the …\nSchema 结构体定义 …\n向树中添加新的节点及其子节点\n添加多个标记 …\n获取完整祖先链\n节点支持的属性集合（属性名 -&gt; 属性定义）\n全局缓存\n验证节点属性是否符合规范\n验证节点内容是否符合类型约束\n获取子节点数量\n获取直接子节点列表\n将原始节点规范编译为可用的节点类型集合\n编译 Schema 定义 …\n检查节点是否存在\n内容匹配规则，定义允许的子节点结构\n创建节点\n创建节点并填充内容\n节点属性的默认值集合\n节点类型的描述信息\n递归获取所有子节点（深度优先）\n根据类型筛选节点\n查找第一个匹配节点\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从节点列表构建节点池\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取节点的所有兄弟节点（包括自身）\n获取左边的所有节点\n获取左边的所有节点 根据下标\n获取两个节点的最近公共祖先\n根据ID获取节点(immutable)\n获取节点在树中的深度\n获取从根节点到目标节点的完整路径\n获取右边的所有节点\n获取右边边的所有节点 根据下标\n…\n节点所属的逻辑分组\n检查节点是否包含必须的属性\n在末尾插入一个子节点\n在指定位置插入子节点\n在末尾插入多个子节点\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查一个节点是否是另一个节点的祖先\n检查节点是否为叶子节点\n获取节点池的唯一标识符\n创建懒加载查询引擎\n允许附加的Mark类型集合\n标记类型映射表\n节点类型的唯一标识符（例如：“dw”, “dxgc…\n创建一个新的节点实例\n创建新的节点类型实例\n创建新的 Schema 实例\n节点类型映射表\n创建优化查询引擎（带缓存）\n并行批量查询节点\n并行查询节点\n并行查询并转换结果\n并行查询并聚合结果\n获取父节点ID\n创建查询引擎实例\n移除指定类型的标记\n移除指定名称的标记\n根据下标删除\n获取从根节点到目标节点的完整路径\n获取节点池中节点总数\n节点类型的详细配置规范\nSchema 的规范定义\n顶级节点类型\n更新节点属性\n验证父子关系一致性\n根据内容匹配规则推导需要的节点类型\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nA type alias for Result that uses anyhow::Error as the …\nHelper functions for creating node pool errors\nError messages for node pool operations\nAn unordered map.\nAn unordered set.\nAn ordered map.\nAn ordered set.\nA persistent vector.\nType alias for <code>GenericHashMap</code> that uses …\nType alias for <code>GenericHashSet</code> that uses …\nType alias for <code>GenericOrdMap</code> that uses <code>DefaultSharedPtr</code> as …\nType alias for <code>GenericOrdSet</code> that uses <code>DefaultSharedPtr</code> as …\nType alias for <code>GenericVector</code> that uses <code>DefaultSharedPtr</code> as …\nConcatenate two vectors.\nConcatenate two vectors.\nUpdate the value for a given key by calling a function with\nUpdate the value for a given key by calling a function with\nAppend the vector <code>other</code> to the end of the current vector.\nGet the last element of a vector.\nGet a mutable reference to the last element of a vector.\nBinary search a sorted vector for a given element.\nBinary search a sorted vector for a given element using a …\nBinary search a sorted vector for a given element with a …\nDiscard all elements from the map.\nDiscard all elements from the set.\nDiscard all elements from the map.\nDiscard all elements from the set.\nDiscard all elements from the vector.\nClone a map.\nClone a set.\nClone a map.\nClone a set.\nClone a vector.\nTest if a value is part of a set.\nTest if a value is part of a set.\nTest if a given element is in the vector.\nTest for the presence of a key in a map.\nTest for the presence of a key in a hash map.\nGet an iterator over the differences between this map and …\nGet an iterator over the differences between this set and …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nGet the <code>Entry</code> for a key in the map for in-place …\nGet the <code>Entry</code> for a key in the map for in-place …\nAdd values to the end of a vector by consuming an iterator.\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nConstruct a <code>Focus</code> for a vector.\nConstruct a <code>FocusMut</code> for a vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a vector from a <code>std::vec::Vec</code>.\nCreate a vector from a <code>std::vec::Vec</code>.\nCreate a vector from an iterator.\nGet the first element of a vector.\nGet a mutable reference to the first element of a vector.\nGet the value for a key from a map.\nReturns a reference to the element in the set, if any, …\nGet the value for a key from a hash map.\nGet a reference to the value at index <code>index</code> in a vector.\nGet a value inside multiple levels of data structures.\nGet the key/value pair for a key from a map.\nGet the key/value pair for a key from a hash map.\nGet the key/value pair for a key from a map.\nGet the key/value pair for a key from a hash map, …\nGet the largest key in a map, along with its value. If the …\nGet the largest value in a set.\nGet the smallest key in a map, along with its value. If the\nGet the smallest value in a set.\nGet a mutable reference to the value for a key from a map.\nGet a mutable reference to the value for a key from a hash …\nGet a mutable reference to the value at index <code>index</code> in a …\nGet a reference to the closest larger entry in a map to a …\nGet the closest larger value in a set to a given value.\nGet the closest larger entry in a map to a given key as a …\nGet a reference to the closest smaller entry in a map to a …\nGet the closest smaller value in a set to a given value.\nGet the closest smaller entry in a map to a given key as a …\nGet a reference to the map’s <code>BuildHasher</code>.\nGet a reference to the set’s <code>BuildHasher</code>.\nAn unordered map.\nConstruct a hash map from a sequence of key/value pairs.\nAn unordered set.\nConstruct a set from a sequence of values.\nGet the first element of a vector.\nGet a reference to the value at index <code>index</code> in the vector.\nGet a mutable reference to the value at index <code>index</code> in the …\nGet the index of a given element in the vector.\nInsert a key/value mapping into a map.\nInsert a value into a set.\nInsert a key/value mapping into a map.\nInsert a value into a set.\nInsert an element into a vector.\nInsert an element into a sorted vector.\nInsert an element into a sorted vector using a comparator …\nInsert an element into a sorted vector where the …\nConstruct the intersection of two maps, keeping the values …\nConstruct the intersection of two sets.\nConstruct the intersection of two maps, keeping the values …\nConstruct the intersection of two sets.\nConstruct the intersection of two maps, calling a function …\nConstruct the intersection of two maps, calling a function …\nConstruct the intersection of two maps, calling a function …\nConstruct the intersection of two maps, calling a function …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest whether a map is empty.\nTest whether a set is empty.\nTest whether a hash map is empty.\nTest whether a set is empty.\nTest whether a vector is empty.\nTest whether a vector is currently inlined.\nTest whether a map is a proper submap of another map, …\nTest whether a map is a proper submap of another map, …\nTest whether a map is a proper submap of another map, …\nTest whether a map is a proper submap of another map, …\nTest whether a set is a proper subset of another set, …\nTest whether a set is a proper subset of another set, …\nTest whether a map is a submap of another map, meaning that\nTest whether a map is a submap of another map, meaning that\nTest whether a map is a submap of another map, meaning that\nTest whether a map is a submap of another map, meaning that\nTest whether a set is a subset of another set, meaning that\nTest whether a set is a subset of another set, meaning that\nIterators over immutable data.\nGet an iterator over the key/value pairs of a map.\nCreate an iterator over the contents of the set.\nGet an iterator over the key/value pairs of a hash map.\nGet an iterator over the values in a hash set.\nGet an iterator over a vector.\nGet a mutable iterator over the values of a hash map.\nGet a mutable iterator over a vector.\nGet an iterator over a map’s keys.\nGet an iterator over a hash map’s keys.\nGet the last element of a vector.\nGet an iterator over the leaf nodes of a vector.\nGet a mutable iterator over the leaf nodes of a vector. …\nGet the size of a map.\nGet the size of a set.\nGet the size of a hash map.\nGet the size of a set.\nGet the length of a vector.\nConstruct an empty map.\nConstruct an empty set.\nConstruct an empty hash map.\nConstruct an empty set.\nConstruct an empty vector.\nConstruct an empty hash map using the same hasher as the …\nConstruct an empty hash set using the same hasher as the …\nAn ordered map.\nConstruct a map from a sequence of key/value pairs.\nAn ordered set.\nConstruct a set from a sequence of values.\nRemove the last element from a vector and return it.\nRemove the first element from a vector and return it.\nTest whether two maps refer to the same content in memory.\nTest whether two sets refer to the same content in memory.\nTest whether two maps refer to the same content in memory.\nTest whether two sets refer to the same content in memory.\nTest whether two vectors refer to the same content in …\nPush a value to the back of a vector.\nPush a value to the front of a vector.\nCreate an iterator over a range of key/value pairs.\nCreate an iterator over a range inside the set.\nConstruct the relative complement between two maps by …\nConstruct the relative complement between two sets, that …\nConstruct the relative complement between two maps by …\nConstruct the relative complement between two sets, that …\nRemove a key/value mapping from a map if it exists.\nRemove a value from a set.\nRemove a key/value pair from a map, if it exists, and …\nRemove a value from a set if it exists.\nRemove an element from a vector.\nRemove the largest value from a set.\nRemove the smallest value from a set.\nRemove a key/value pair from a map, if it exists, and …\nRemove a key/value pair from a map, if it exists, and …\nFilter out values from a map which don’t satisfy a …\nFilter out values from a set which don’t satisfy a …\nRetain only the elements specified by the predicate.\nUpdate the value at index <code>index</code> in a vector.\nAbout shared pointers. Re-export the <code>archery</code> crate.\nConstruct a map with the <code>n</code> smallest keys removed from a …\nConstruct a set with the <code>n</code> smallest values removed from a …\nConstruct a vector with <code>count</code> elements removed from the …\nExtract a slice from a vector.\nSort a vector.\nSort a vector using a comparator function.\nSplit a map into two, with the left hand map containing …\nSplit a set into two, with the left hand set containing …\nSplit a vector at a given index.\nSplit a map into two, with the left hand map containing …\nSplit a set into two, with the left hand set containing …\nSplit a vector at a given index.\nSwap the elements at indices <code>i</code> and <code>j</code>.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two sets.\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct the symmetric difference between two maps by …\nConstruct a map with only the <code>n</code> smallest keys from a given …\nConstruct a set with only the <code>n</code> smallest values from a …\nConstruct a vector of the first <code>count</code> elements from the …\nTruncate a vector to the given size.\nConstruct the union of two maps, keeping the values in the …\nConstruct the union of two sets.\nConstruct the union of two maps, keeping the values in the …\nConstruct the union of two sets.\nConstruct the union of two maps, using a function to decide\nConstruct the union of two maps, using a function to decide\nConstruct the union of two maps, using a function to decide\nConstruct the union of two maps, using a function to decide\nConstruct the union of a sequence of maps, selecting the …\nConstruct the union of multiple sets.\nConstruct the union of a sequence of maps, selecting the …\nConstruct the union of multiple sets.\nConstruct the union of a sequence of maps, using a …\nConstruct the union of a sequence of maps, using a …\nConstruct the union of a sequence of maps, using a …\nConstruct the union of a sequence of maps, using a …\nConstruct a map with a single mapping.\nConstruct a set with a single value.\nConstruct a hash map with a single mapping.\nConstruct a set with a single value.\nConstruct a vector with a single value.\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new set from the current set with the given …\nConstruct a new hash map by inserting a key/value mapping …\nConstruct a new set from the current set with the given …\nCreate a new vector with the value at index <code>index</code> updated.\nUpdate a value inside multiple levels of data structures.\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new hash map by inserting a key/value mapping …\nConstruct a new map by inserting a key/value mapping into a\nConstruct a new map by inserting a key/value mapping into a\nGet an iterator over a map’s values.\nGet an iterator over a hash map’s values.\nA persistent vector.\nConstruct a vector from a sequence of elements.\nConstruct an empty hash map using the provided hasher.\nConstruct an empty hash set using the provided hasher.\nRemove a key/value pair from a map, if it exists.\nConstruct a new set with the given value removed if it’s …\nConstruct a new map without the given key.\nConstruct a new set with the given value removed if it’s …\nRemove the largest key from a map, and return its value as …\nRemove the largest value from a set, and return that value …\nRemove the largest key from a map, and return that key, its\nRemove the smallest key from a map, and return its value as\nRemove the smallest value from a set, and return that …\nRemove the smallest key from a map, and return that key, …\nA consuming iterator over the elements of a map.\nA handle for a key and its associated value.\nAn unordered map.\nType alias for <code>GenericHashMap</code> that uses …\nAn iterator over the elements of a map.\nA mutable iterator over the elements of a map.\nAn iterator over the keys of a map.\nAn entry which exists in the map.\nAn entry for a mapping that already exists in the map.\nAn entry which doesn’t exist in the map.\nAn entry for a mapping that does not already exist in the …\nAn iterator over the values of a map.\nCall the provided function to modify the value if the value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value.\nGet a mutable reference to the current value.\nOverwrite the current value.\nInsert a value into this entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this entry into its key.\nConvert this entry into a mutable reference.\nGet the key for this entry.\nGet the key for this entry.\nGet the key for this entry.\nInsert a default value if there was no value already, and …\nInsert the default value provided if there was no value …\nInsert the default value from the provided function if …\nRemove this entry from the map and return the removed …\nRemove this entry from the map and return the removed …\nA consuming iterator over the elements of a set.\nAn unordered set.\nType alias for <code>GenericHashSet</code> that uses …\nAn iterator over the elements of a set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an iterator of values using a function to update an …\nThis value has been added to the new map.\nA consuming iterator over the elements of a map.\nA description of a difference between two ordered maps.\nAn iterator over the differences between two maps.\nA handle for a key and its associated value.\nAn ordered map.\nAn iterator over the key/value pairs of a map.\nAn iterator ove the keys of a map.\nAn entry which exists in the map.\nAn entry for a mapping that already exists in the map.\nType alias for <code>GenericOrdMap</code> that uses <code>DefaultSharedPtr</code> as …\nAn iterator over a range of key/value pairs in a map.\nThis value has been removed from the new map.\nThis value has been changed between the two maps.\nAn entry which doesn’t exist in the map.\nAn entry for a mapping that does not already exist in the …\nAn iterator over the values of a map.\nCall the provided function to modify the value if the value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value.\nGet a mutable reference to the current value.\nOverwrite the current value.\nInsert a value into this entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this entry into its key.\nConvert this entry into a mutable reference.\nGet the key for this entry.\nGet the key for this entry.\nGet the key for this entry.\nInsert a default value if there was no value already, and …\nInsert the default value provided if there was no value …\nInsert the default value from the provided function if …\nRemove this entry from the map and return the removed …\nRemove this entry from the map and return the removed …\nThe new value.\nThe old value.\nThis value has been added to the new set.\nA consuming iterator over the elements of a set.\nA description of a difference between two ordered sets.\nAn iterator over the difference between two sets.\nAn ordered set.\nAn iterator over the elements of a set.\nType alias for <code>GenericOrdSet</code> that uses <code>DefaultSharedPtr</code> as …\nA ranged iterator over the elements of a set.\nThis value has been removed from the new set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nType constructors for <code>Arc</code> pointers.\nDefault shared pointer used in data structures like …\nType constructors for <code>Rc</code> pointers.\nPointer to shared data with reference-counting.\nTrait for type constructors of reference-counting pointers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the leaf nodes of a vector.\nA mutable iterator over the leaf nodes of a vector.\nA consuming iterator over vectors with values of type <code>A</code>.\nFocused indexing over a <code>Vector</code>.\nA mutable version of <code>Focus</code>.\nA persistent vector.\nAn iterator over vectors with values of type <code>A</code>.\nA mutable iterator over vectors with values of type <code>A</code>.\nType alias for <code>GenericVector</code> that uses <code>DefaultSharedPtr</code> as …\nGet the chunk for the given index.\nGet the chunk for the given index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the value at a given index.\nGet a reference to the value at a given index.\nGet a mutable reference to the value at a given index.\nGet a reference to the value at a given index.\nGet a reference to the value at a given index.\nGet a mutable reference to the value at a given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the focused <code>Vector</code> is empty.\nTest if the focused <code>Vector</code> is empty.\nGet the length of the focused <code>Vector</code>.\nGet the length of the focused <code>Vector</code>.\nNarrow the focus onto a subslice of the vector.\nNarrow the focus onto a subslice of the vector.\nConstruct a <code>Focus</code> for a <code>Vector</code>.\nConstruct a <code>FocusMut</code> for a <code>Vector</code>.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nAdvance the iterator and return the next value.\nRemove and return an element from the back of the iterator.\nRemove and return an element from the back of the iterator.\nRemove and return an element from the back of the iterator.\nRemove and return an element from the back of the iterator.\nLookup two indices simultaneously and run a function over …\nUpdate the value at a given index.\nSplit the focus into two.\nSplit the focus into two.\nSwap the values at two given indices.\nLookup three indices simultaneously and run a function …\nConvert a <code>FocusMut</code> into a <code>Focus</code>.\n基础标记实现 例如颜色 背景色 批注 @property …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n基础节点定义，任何数据都可以认为是节点\n缓存命中率统计\n懒加载查询引擎配置\n实时构建的懒加载查询引擎\n线程安全的节点池封装\n优化的查询引擎\n查询缓存配置\n查询条件枚举\n查询条件构建器\n查询统计信息\n查询统计摘要\n按祖先节点类型查询\n按属性值查询\n按子节点数量查询\n按深度查询\n按深度查询（使用索引）\n懒加载深度索引\n按后代节点类型查询\n按标记查询\n按标记查询（使用索引）\n懒加载标记索引\n按节点类型查询\n按类型查询（使用索引）\n懒加载类型索引\n缓存大小\n是否启用缓存\n缓存大小\n组合查询（支持索引优化）\n执行查询并返回匹配的节点数量\n是否启用缓存\n执行查询并返回所有匹配的节点\n执行查询并返回第一个匹配的节点\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取查询统计信息\n…\n索引缓存大小\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的查询引擎实例\n并行执行查询并返回匹配的节点数量\n并行执行查询并返回所有匹配的节点\n并行执行查询并返回第一个匹配的节点\n组合查询（使用索引和缓存）\n…\n定义节点类型的约束规范\n…\n节点支持的属性集合（属性名 -&gt; 属性定义）\n属性规范定义（属性名 -&gt; 属性规范）\n内容约束表达式（例如：“*”）\n内容匹配规则，定义允许的子节点结构\n节点属性的默认值集合\n节点类型的描述信息\n类型描述信息\nReturns the argument unchanged.\nReturns the argument unchanged.\n所属的逻辑分组\n节点所属的逻辑分组\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n允许附加的Mark类型集合\n节点类型的唯一标识符（例如：“dw”, “dxgc…\n节点类型的详细配置规范\n属性定义结构体 …\n属性规范定义\nSchema 结构体定义 …\nSchema 规范定义 …\n全局缓存\n计算属性值 …\n属性的默认值\n获取属性的默认值映射 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查属性是否为必需的 …\n标记类型映射表\n节点类型映射表\nSchema 的规范定义\n顶级节点类型\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n异步运行时超时机制改进\n异步工具模块\n事务处理器\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n关闭流引擎\n异步任务处理器 …\n未启动\n任务处理器的错误类型\n处理器状态\n任务处理器的统计信息\n运行中\n已关闭\n正在关闭\n任务处理器特征 定义了处理任务的基本接口\n任务队列结构\n任务处理的结果结构\n任务处理的结果状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取处理器当前状态\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查处理器是否正在运行\n创建新的异步任务处理器\n优雅地关闭处理器 …\n启动任务处理器 …\n提交新任务到处理器 …\n异步编�器运行时\n执行命令并生成相应的事务\n创建新的编辑器实例\n使用指定配置创建异步编辑器实例\n高性能事务处理方法，使用FlowEngine处理事务\nReturns the argument unchanged.\n从XML内容字符串创建异步编辑器实例\n从指定路径的XML …\n从多个XML schema文件创建异步编辑器实例\n获取当前配置\nCalls <code>U::from(self)</code>.\n设置性能监控配置\n优雅关闭异步运行时\n更新配置\n异步/同步边界处理工具\n异步安全的资源清理器\n异步操作的同步包装器\n同步广播事件（自动选择最佳方法）\n手动执行清理（异步版本）\n手动执行清理（同步版本）\n同步销毁事件总线（自动选择最佳方法）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查当前是否在异步上下文中\n创建新的异步清理器\n在同步上下文中安全地执行异步操作\n…\n安全地在异步上下文中执行可能阻塞的操作\nEditor 结构体代表编辑器的核心功能实现 …\n创建新的编辑器实例\n使用指定配置创建编辑器实例\n销毁编辑器实例\n处理编辑器事务的核心方法\n更新编辑器状态并记录到历史记录 …\n共享的基础实现方法\nReturns the argument unchanged.\n从快照创建编辑器实例（最快启动方式）\n…\n从XML内容字符串创建编辑器实例\n从指定路径的XML schema文件创建编辑器实例\n从多个XML schema文件创建编辑器实例\n获取当前配置\nCalls <code>U::from(self)</code>.\n更新配置\n更新编辑器状态并记录到历史记录 …\n更新编辑器状态并记录到历史记录 …\n事务处理器\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n任务处理器的错误类型\n同步任务处理器\n任务处理器特征\n任务处理的结果结构\n任务处理的结果状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nXML Schema 解析错误类型\nXML Schema 解析结果类型\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n多文件解析上下文\nXML Schema 解析器\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nXML Schema 序列化器\n将 <code>Extensions</code> 列表序列化为 XML …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n将 <code>SchemaSpec</code> 序列化为 XML …\nXML Schema 根结构（基础版本）\n支持引用的XML Schema 根结构（完整版本）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n核心快照数据结构\n扩展类型枚举\n可序列化的 Schema 结构\n快照构建器\n快照管理器\n添加自定义扩展\n添加 XML Schema 文件\n构建快照\n预编译的配置\n预计算的哈希值（用于快速验证）\n快照创建时间戳\n扩展映射表（名称到类型的映射）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n从文件加载快照\n检查快照是否需要更新\n创建新的快照构建器\n从快照恢复 ExtensionManager\n保存快照到文件\n序列化的 Schema (使用 JSON 格式)\n验证快照有效性\n快照版本，用于兼容性检查\n设置配置\nXML Schema 缓存\n配置结构体，存储编辑器的核心配置信息\nState 结构体代表编辑器的整体状态\n状态配置结构体，用于初始化编辑器状态\n事务结构体，用于管理文档的修改操作\n添加标记 id: 节点ID marks: 要添加的标记\n添加新节点 parent_id: 父节点ID node: …\n异步应用事务到当前状态\n异步应用内部事务\n异步应用事务到当前状态\n创建新的编辑器状态\nConstructs an event at the debug level.\n反序列化状态\n获取当前文档状态\nConstructs an event at the error level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取元数据 key: 键 返回: Option&lt;…\n事务的时间戳\nConstructs an event at the info level.\n初始化日志系统\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n存储元数据的哈希表，支持任意类型数据\n根据配置创建新的状态实例\n创建新的事务实例 state: 当前状态对象 返回: …\n获取插件列表\n删除标记 id: 节点ID marks: 要删除的标记\n删除节点 id: 节点ID nodes: 要删除的节点\n获取资源管理器\n获取结构定义\n序列化状态\n设置元数据 key: 键 value: 值（支持任意类型）\n设置节点属性 id: 节点ID values: 属性键值对\n获取已排序的插件列表 …\nConstructs an event at the warn level.\nContains the error value\nContains the success value\nA type alias for Result that uses anyhow::Error as the …\nHelper functions for creating common error types\nCreates a configuration error\nCreates a deserialization error\nCreates a field operation error\nCreates an invalid plugin state error\nCreates a plugin apply error\nCreates a plugin initialization error\nCreates a plugin not found error\nCreates a schema error\nCreates a serialization error\nCreates a transaction error\nReturns the argument unchanged.\n检查状态容器中是否包含指定类型的数据\nCalls <code>U::from(self)</code>.\n将数据存入状态容器中\n从状态容器中移除并返回指定类型的数据\n获取当前日志级别\n初始化日志系统\n设置日志级别\n全局资源管理器 …\n清理所有资源 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n创建新的全局资源管理器实例\n依赖管理器\n插件实例结构体 表示一个具体的插件实例\n插件配置\n插件管理器\n插件元数据 …\n插件规范结构体 定义插件的配置和行为\n插件特征 …\nPluginTrait实现一个 default 实现 状态字段特征 …\n添加依赖关系\n添加插件节点\n追加事务处理 …\n应用状态变更 根据事务内容更新插件状态\n应用事务追加逻辑\n应用事务过滤逻辑\n检查缺失的依赖 - 直接从图中提取\n获取插件配置（静态配置）- 提供默认实现\n反序列化插件状态\n事务过滤 决定是否允许事务执行\n验证插件依赖\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取插件的所有依赖（包括间接依赖）\n获取循环依赖\n获取循环依赖的详细报告\n获取插件配置\n获取插件的直接依赖\n获取插件元数据\n获取插件名称\n获取排序后的插件 按照依赖关系排序\n从全局状态中获取插件状态\n获取拓扑排序\n检查循环依赖\n初始化插件状态\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查初始化状态\n获取插件元数据（静态信息）- 提供默认实现\n创建新的插件实例\n注册插件\n序列化插件状态\n循环依赖报告\n依赖管理器\n缺失依赖报告\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取所有缺失的依赖名称\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n生成人类可读的报告\n生成人类可读的报告\n插件管理器\n插件实例结构体 表示一个具体的插件实例\n插件规范结构体 定义插件的配置和行为\n插件特征 …\nPluginTrait实现一个 default 实现 状态字段特征 …\n追加事务处理 …\n应用状态变更 根据事务内容更新插件状态\n获取插件配置（静态配置）- 提供默认实现\n反序列化插件状态\n事务过滤 决定是否允许事务执行\n初始化插件状态\n获取插件元数据（静态信息）- 提供默认实现\n序列化插件状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n配置结构体，存储编辑器的核心配置信息\nState 结构体代表编辑器的整体状态\n状态配置结构体，用于初始化编辑器状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n定义可执行的命令接口 要求实现 Send + Sync …\n事务结构体，用于管理文档的修改操作\n事务的时间戳\n存储元数据的哈希表，支持任意类型数据\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n批量步骤：将多个 Step …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n添加节点的步骤\n删除节点的步骤\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n批量应用步骤（优化版本）\n原始文档状态\n清除历史记录（释放内存）\n提交更改，将当前状态设为新的基础状态 …\n获取当前文档状态，使用延迟计算\n检查文档是否被修改\nReturns the argument unchanged.\n获取历史记录大小\nCalls <code>U::from(self)</code>.\n存储所有反向操作步骤\n回滚所有未提交的更改\n回滚指定数量的步骤\n文档的模式定义\n存储所有操作步骤\n带元信息的历史记录项\n操作描述\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从ExtensionManager创建RuntimeOptions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n状态快照\n时间戳")