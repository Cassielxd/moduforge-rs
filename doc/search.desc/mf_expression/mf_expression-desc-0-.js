searchState.loadedDescShard("mf_expression", 0, "A lightweight expression language designed for the …\nIsolate …\nErrors which happen within isolate or during evaluation\nCompiles a standard expression\nCompiles an unary expression\n编译器模块\nEvaluates a standard expression\nEvaluates a unary expression; Required: context must be an …\nReturns the argument unchanged.\nReturns the argument unchanged.\n函数模块\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n词法分析器模块\n语法分析器模块\n…\n…\n虚拟机模块 - 操作码执行引擎\n便利宏，用于在指定作用域内设置 State\nMachine code interpreted by VM\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompiled expression\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n日期加法：向日期添加时间间隔\n…\n闭包函数：用于数组操作的特殊函数\n闭包函数枚举\nAn iterator over the variants of ClosureFunction\n计数：统计满足条件的元素数量\n日期解析函数（已废弃，请使用d()函数）\n日期方法枚举\n日期方法\n…\n日：获取日期的天数\n…\n…\n年中的天：获取日期在一年中的第几天\n…\n已废弃函数：为向后兼容保留的旧函数\n已废弃函数枚举\n时间差：计算两个日期之间的差值\n…\n…\n…\n过滤：返回满足条件的元素组成的新数组\n扁平映射：对每个元素应用函数并展平结果\n格式化：将日期格式化为字符串\n函数类型枚举\n函数注册表\n小时：获取日期的小时数\n内置函数：系统预定义的标准函数\n…\n…\n闰年判断：检查日期所在年份是否为闰年\n相同判断：检查两个日期是否相同\n…\n…\n今天判断：检查日期是否为今天\n明天判断：检查日期是否为明天\n有效性检查：检查日期是否有效\n昨天判断：检查日期是否为昨天\n映射：对每个元素应用函数，返回结果数组\n方法类型枚举\n方法注册表\n自定义函数：用户定义的扩展函数\n分钟：获取日期的分钟数\n月：获取日期的月份\n…\n…\n无匹配：检查数组中是否没有元素满足条件\n时区名称：获取日期的时区名称\n…\n季度：获取日期所在的季度\n秒：获取日期的秒数\n设置日期组件：设置年、月、日等特定组件\n存在匹配：检查数组中是否有元素满足条件\n…\n…\n日期减法：从日期减去时间间隔\n…\n时间戳：获取日期的Unix时间戳\n时区转换：将日期转换到指定时区\n周：获取日期在一年中的第几周\n…\n星期几：获取日期是星期几\n…\n年：获取日期的年份\n…\n函数参数处理模块\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n根据方法类型获取方法定义\n根据函数类型获取函数定义\n内置函数模块\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n自定义函数模块\nState 守卫模块\n从字符串解析方法类型\n从字符串解析函数类型\n函数参数包装器\n获取必需数组\n获取必需布尔值\n获取必需动态类型变量\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n获取必需数字\n获取可选数组\n获取必需对象\n获取可选布尔值\n获取可选动态类型变量\n获取可选数字\n获取可选对象\n获取可选字符串\n获取可选变量（返回Option）\n获取必需字符串\n获取必需变量（返回Result）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n绝对值：返回数字的绝对值\n平均值：计算数组中所有数字的平均值\n布尔转换：将值转换为布尔值\n向上取整：返回不小于给定数字的最小整数\n…\n日期函数：创建或解析日期（使用简写’d’…\n结束匹配：检查字符串是否以指定后缀结束\n…\n扁平化函数：将嵌套数组展平为一维数组\n向下取整：返回不大于给定数字的最大整数\n…\n内置函数枚举\nAn iterator over the variants of InternalFunction\n数字检查：检查值是否为数字类型\n键列表：获取对象的所有键\n长度函数：获取字符串长度或数组元素个数\n转小写：将字符串转换为小写\n正则匹配：检查字符串是否匹配正则表达式\n最大值：返回数组中的最大值\n中位数：计算数组的中位数\n最小值：返回数组中的最小值\n众数：计算数组的众数\n数字转换：将值转换为数字\n随机数：生成0到指定数字之间的随机数\n四舍五入：对数字进行四舍五入\n分割：使用分隔符将字符串分割为数组\n开始匹配：检查字符串是否以指定前缀开始\n字符串转换：将值转换为字符串\n求和：计算数组中所有数字的和\n去空格：移除字符串两端的空白字符\n截断：截断数字的小数部分\n类型获取：返回值的类型名称\n转大写：将字符串转换为大写\n值列表：获取对象的所有值\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n自定义函数标识符\n自定义函数定义\n用于注册特定状态类型 <code>S</code> …\n自定义函数注册表\n清空所有注册的函数\n清理当前State上下文\n执行器\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取函数定义\n检查当前是否有活跃的State\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查函数是否已注册\n列出所有已注册的函数\n函数名称\n函数名称\n创建一个新的辅助实例。\n注册一个自定义函数。\n设置当前State上下文\n函数签名\nState 守卫，使用 RAII 模式自动管理 State …\n自动清理 State 上下文\n创建空的 State 守卫（用于清理已有的 State）\nReturns the argument unchanged.\n获取当前是否有活跃的 State\nCalls <code>U::from(self)</code>.\n创建新的 State 守卫\n异步版本的 State 守卫便利函数\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the variants of Bracket\n词法分析错误类型 …\nContains information from lexical analysis\nClassification of tokens\n意外的文件结束错误 …\n意外的符号错误 …\n不匹配的符号错误 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create Self from the raw representation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n解析未完成错误 …\n节点错误 …\n节点元数据结构体 …\n语法分析错误类型 …\n语法分析结果结构体 …\n检查解析结果是否包含错误 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n数字转换错误\n操作码执行错误\n操作码索引越界错误\n日期时间解析错误\n栈操作越界错误\n虚拟机错误枚举\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n当前字节码的调试信息\n无效的索引位置\n错误信息\n操作码名称\n当前栈状态的调试信息\n导致解析失败的时间戳字符串")