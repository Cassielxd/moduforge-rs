searchState.loadedDescShard("mf_collab_client", 0, "Contains the error value\nContains the success value\n客户端 WebSocket Sink 包装器，类似于 WarpSink …\n客户端 WebSocket Stream 包装器，类似于 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n链接处理，通过消息流实现 Yjs/Yrs …\n同步状态跟踪器\nReturns an underlying Awareness structure, that contains …\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取当前协议同步状态\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建带同步检测的连接\n标记连接失败\n重置同步状态（用于重连）\n获取同步跟踪器\n等待初始同步完成\n创建带协议和同步检测的连接\n映射器工具类\n便捷函数：批量转换步骤\n获取注册的转换器数量\n便捷函数：创建转换上下文\nReturns the argument unchanged.\n获取性能统计信息\n获取 Yrs 文档的版本信息\n获取全局注册表\nCalls <code>U::from(self)</code>.\n检查 Yrs 文档是否为空\n便捷函数：注册转换器\n性能统计信息\n高性能的静态分发转换器注册表 …\n清空所有转换器（主要用于测试）\n查找并应用转换器 - 主要性能路径\n使用全局注册表转换步骤的便捷函数\n批量转换步骤 - 优化的批处理路径\n获取注册的转换器数量\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取所有已注册的转换器信息\n获取特定类型的转换器信息\n获取全局注册表的性能统计\n获取性能统计信息\n获取全局转换器注册表\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的注册表\n注册转换器（编译时调用）\n注册转换器到全局注册表的便捷函数\n检查是否支持某个步骤类型\n验证步骤而不执行转换\n转换错误类型 - …\n转换结果类型别名\nContains the error value\nContains the success value\n可恢复的转换错误 - 支持重试机制\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建节点操作失败错误\n创建权限不足错误\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n创建不支持步骤类型错误\n创建验证失败错误\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n转换上下文 - 提供转换过程中需要的信息\n转换器工厂 trait - 用于延迟创建转换器实例\n转换器信息\n类型擦除的转换器包装器 …\n具体类型的转换器工厂实现\n类型安全的步骤转换器 trait …\n客户端 ID\n转换具体类型的步骤到 Yrs 事务\n获取转换器名称\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建类型擦除的转换器\n转换器优先级（数字越小优先级越高）\n获取支持的步骤类型名称\n是否支持并发执行\n时间戳\n尝试转换步骤\n获取类型信息\n用户 ID\n验证步骤是否有效（可选实现）\n检查服务端是否可用\n断开连接并清理资源\nReturns the argument unchanged.\n获取协议同步状态\n获取连接状态\nCalls <code>U::from(self)</code>.\n检查连接状态\n订阅同步事件\n等待协议级同步完成（包括空房间）\n连接状态变化\n连接错误类型\n连接失败\n收到数据更新\n首次同步完成（空房间也算）\n未开始\n协议同步状态变化\n协议同步状态\n已发送 SyncStep1\n已接收 SyncStep2 - …\nStep操作结果 - …\n同步事件\n同步事件回调\n后续更新中\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n获取当前时间戳（毫秒）\n将标记添加到 Yrs 数组中\n将事务应用到 Yrs 文档\n将事务应用到 Yrs 文档\n初始化树 将树同步到 Yrs 文档\n将 Yrs 文档转换为 ModuForge Tree …\n递归构建 NodeEnum\n从 Yrs 文档的 nodes_map 递归构建所有节点和 …\nReturns the argument unchanged.\n获取或创建标记数组\n获取或创建标记数组\n获取或创建节点属性映射\n获取或创建节点数据映射\n从 Yrs 文档中获取根节点ID\nCalls <code>U::from(self)</code>.\n将 JSON 值转换为 Yrs 的 Any 类型\n将树同步到 Yrs 文档\n将 Yrs 的 Any 类型转换为 JSON 值\nThe corresponding StickyIndex points to space <strong>after</strong> the …\nAny is an enum with a potentially associated value that is …\nAny value that it treated as a single element in it’s …\nA preliminary array. It’s can be used to initialize an …\nA collection used to store data in an indexed sequence …\nAssociation type used by StickyIndex. In general …\nThe corresponding StickyIndex points to space <strong>before</strong> the …\nAn unique logical identifier of a shared collection. Can …\nCompute editable strings length and offset using UTF-8 …\nTrait implemented by all Y-types, allowing for observing …\nDeleteSet contains information about all blocks (described …\nA Yrs document type. Documents are the most important …\nTrait implemented by shared types to display their …\nA descriptor used to reference to shared collections by …\nBlock identifier, which allows to uniquely identify any …\nStruct describing context in which StickyIndex is placed. …\nTrait used to retrieve a StickyIndex corresponding to a …\nA preliminary map. It can be used to early initialize the …\nCollection used to store key-value entries in an unordered …\nA logical reference used to represent a shared collection …\nIf a containing collection is a nested y-type, which is …\nData structure used to handle publish/subscribe callbacks …\nData structure used to handle publish/subscribe callbacks …\nOffset is a result of mapping of StickyIndex onto document …\nDetermines how string length and offsets of [Text]/[XmlText…\nConfiguration options of Doc instance.\nA binary marker that can be assigned to a read-write …\nTrait defining read capabilities present in a transaction. …\nStickyIndex is relative to a given block ID. This happens …\nA logical reference to a root-level shared collection. It …\nIf a containing collection is a root-level y-type, which …\nA subset of SharedRef used to mark collaborative …\nIterator struct used to traverse over all of the root …\nCommon trait for shared collaborative collection types in …\nSnapshot describes a state of a document store at a given …\nState vector is a compact representation of all known …\nA sticky index is based on the Yjs model and is not …\nStore is a core element of a document. It contains all of …\nEvent used to communicate load requests from the …\nSubscription handle returned by Observer::subscribe …\nA preliminary text. It’s can be used to initialize a …\nA shared data type used for collaborative text editing. It …\nTrait implemented by Doc and shared types, used for …\nA very lightweight read-only transaction. These …\nHolds transaction update information from a commit after …\nRead-write transaction. It can be used to modify an …\nInstance of a shared collection of undefined type. Usually …\nUpdate type which contains an information about all …\nAn update event passed to a callback subscribed with …\nCompute editable strings length and offset using UTF-16 …\nValue that can be returned by Yrs data types. This …\nA preliminary type that will be materialized into an …\nXML element data type. It represents an XML node, which …\nA preliminary type that will be materialized into an …\nA XML fragment, which works as an untagged collection of …\nAn return type from XML elements retrieval methods. It’s …\nA preliminary type that will be materialized into an …\nA shared data type used for collaborative text editing, …\nInstance of an ArrayRef.\nSubdocument.\nInstance of a MapRef.\nInstance of a TextRef.\nInstance of a XmlElementRef.\nInstance of a XmlFragmentRef.\nInstance of a XmlTextRef.\nReturns an iterator over all sub-documents added to a …\nState vector of the transaction after [Transaction::commit]…\nConstruct a lib0 Any value literal.\nApplies a deserialized Update contents into a document …\nIf true - associate to the right block. Otherwise, …\nAssociation type used by StickyIndex this structure was …\n<code>atomic</code> module is a home for AtomicRef cell-like struct, …\nReturns an unordered iterator over all attributes …\nIf a subdocument, automatically load document. If this is …\nCorresponding document’s state vector at the moment when …\nPointer to a collection type Offset refers to.\nReturns a snapshot of callbacks subscribed to this …\nReturns a snapshot of callbacks subscribed to this …\nReturns a list of root level types changed in a scope of …\nCleanup already released subscriptions. Whenever a …\nCleanup already released subscriptions. Whenever a …\nClears the contents of current map, effectively removing …\nUnique identifier of a client.\nA unique client identifier, that’s also a unique …\nGlobally unique client identifier. This value must be …\nMonotonically incrementing sequence number, which informs …\nAssociate this document with a collection. This only plays …\nCommits current transaction. This step involves cleaning …\nChecks if current state vector includes given block …\nChecks if an entry with given <code>key</code> can be found within …\nData about deletions performed in the scope of current …\nCompressed information about all deleted blocks at current …\nStarts destroy procedure for a current document, …\nReturns an ordered sequence of formatted chunks, current …\nReturns the Delta representation of this YText type.\nGivens an input <code>update</code> (encoded using lib0 v1 encoding) of …\nGivens an input <code>update</code> (encoded using lib0 v2 encoding) of …\nEncodes the document state to a binary format.\nCompute a diff to sync with another client.\nEncodes the difference between remove peer state given its …\nEncodes all changes from current transaction block store …\nEncodes all changes from current transaction block store …\nDecodes a input <code>update</code> (encoded using lib0 v1 encoding) …\nDecodes a input <code>update</code> (encoded using lib0 v2 encoding) …\nEncodes changes made within the scope of the current …\nEncodes changes made within the scope of the current …\nEncodes changes made within the scope of the current …\nWraps an existing piece of text within a range described …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a DeleteSet by reading all deleted blocks and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a value stored at a given <code>index</code>. Returns <code>None</code> …\nReturns a value stored under a given <code>key</code> within current …\nRetrieves a value stored at a given <code>index</code>. Returns <code>None</code> …\nReturns a reference to a shared collection current Root …\nIf current Nested logical reference points to an …\nReturns a reference to a shared collection current hook …\nGet the latest clock sequence number value for a given …\nReturns an ArrayRef data structure stored under a given …\nReturns a value of an attribute given its <code>attr_name</code>. …\nGet the latest clock sequence number observed and …\nReturns a MapRef data structure stored under a given <code>name</code>. …\nMaps current StickyIndex onto Offset which points to …\nReturns a reference to a shared root-level collection …\nReturns an ArrayRef data structure stored under a given …\nReturns an ArrayRef data structure stored under a given …\nReturns a MapRef data structure stored under a given <code>name</code>. …\nReturns a MapRef data structure stored under a given <code>name</code>. …\nReturns a TextRef data structure stored under a given <code>name</code>…\nReturns a TextRef data structure stored under a given <code>name</code>…\nReturns a XmlFragmentRef data structure stored under a …\nReturns a XmlFragmentRef data structure stored under a …\nDisplays the content of a current collection in string …\nConverts context of this text data structure into a single …\nConverts current XML node into a textual representation. …\nConverts current XML node into a textual representation. …\nReturns a TextRef data structure stored under a given <code>name</code>…\nReturns a XmlFragmentRef data structure stored under a …\nA globally unique identifier, that’s also a unique …\nA globally unique identifier for this document.\nReturns a logical descriptor of a current shared …\nUnique logical identifier of a shared collection.\nReturns an ID of the block position which is used as a …\nUpdates a state vector observed clock sequence number for …\nHuman readable index corresponding to this Offset.\nInserts a <code>value</code> at the given <code>index</code>. Inserting at index <code>0</code> …\nInserts a new <code>value</code> under given <code>key</code> into current map. …\nInserts a <code>chunk</code> of text at a given <code>index</code>. If <code>index</code> is <code>0</code>, …\nInserts a <code>value</code> at the given <code>index</code>. Inserting at index <code>0</code> …\nInserts an information about delete block (identified by <code>id</code>…\nInserts an attribute entry into current XML element.\nInserts an embed <code>content</code> at a given <code>index</code>.\nInserts an embed <code>content</code> of text at a given <code>index</code>. If <code>index</code>…\nInserts multiple <code>values</code> at the given <code>index</code>. Inserting at …\nInserts a <code>chunk</code> of text at a given <code>index</code>. If <code>index</code> is <code>0</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to convert current Hook type into Nested one. …\nAttempts to convert current Hook type into Root one. …\nIf current underlying XmlNode is wrapping a XmlElementRef, …\nIf current underlying XmlNode is wrapping a XmlFragmentRef…\nIf current underlying XmlNode is wrapping a XmlTextRef, it …\nCheck if given node is alive. Returns false if node has …\nChecks if given block <code>id</code> is considered deleted from the …\nChecks if delete set contains any clock ranges.\nChecks if current state vector contains any data.\nReturns an iterator, that can be used to lazely traverse …\nReturns an iterator that enables to traverse over all …\nReturns an iterator over all client-range pairs registered …\nReturns an iterator which enables to traverse over all …\nReturns an iterator that enables to traverse over all keys …\nReturns a number of elements stored in current array.\nReturns a number of entries stored within current map.\nReturns a number of characters visible in a current text …\nReturns a number of elements stored in current array.\nReturns number of clients stored;\nReturns a number of unique clients observed by a document, …\nSends a load request to a parent document. Works only if …\nReturns an iterator over all sub-documents living in a …\nMerges another delete set into a current one, combining …\nMerges another update into current one. Their blocks are …\nMerges another state vector into a current one. Since …\nMerges a sequence of updates (encoded using lib0 v1 …\nMerges a sequence of updates (encoded using lib0 v2 …\nMoves all elements found within <code>start</code>..<code>end</code> indexes range …\nMoves element found at <code>source</code> index into <code>target</code> index …\nUnique identifier of root-level shared collection.\nCreates a new document with a randomized client identifier.\nCreates a new empty delete set instance.\nCreates a new logical reference for a root-level shared …\nCreates a new Observer with no active callbacks.\nCreates a new [ObserverMut with no active callbacks.\nSubscribes a given callback to be triggered whenever …\nSubscribe a callback <code>f</code> for all events emitted by this and …\nSubscribe callback function, that will be called whenever …\nSubscribe callback function, that will be called whenever …\nSubscribe callback function to updates on the <code>Doc</code>. The …\nSubscribe callback function for any changes performed …\nSubscribe callback function for any changes performed …\nHow to we count offsets and lengths used in text …\nReturns config options of this Doc instance.\nReturns origin of the transaction if any was defined. …\nIf current document has been inserted as a sub-document, …\nIf there are some delete updates waiting for missing …\nIf there are any missing updates, this method will return …\nAppends a given <code>chunk</code> of text at the end of a current text …\nInserts given <code>value</code> at the end of the current array.\nInserts given <code>value</code> at the end of the current array.\nInserts given <code>value</code> at the beginning of the current array.\nInserts given <code>value</code> at the beginning of the current array.\nRemoves a single element at provided <code>index</code>.\nRemoves a stored within current map under a given <code>key</code>. …\nRemoves a single element at provided <code>index</code>.\nRemoves an attribute recognized by an <code>attr_name</code> from a …\nRemoves a range of elements from current array, starting …\nRemoves up to a <code>len</code> characters from a current text …\nRemoves a range of elements from current array, starting …\nReturns an iterator over all sub-documents removed from a …\nCreate a logical collaborative collection reference to a …\nReturns an iterator over top level (root) shared types …\nUpdates a state vector observed clock sequence number for …\nUpdates a state vector observed clock sequence number for …\nWhether the document should be synced by the provider now. …\nDetermines if transactions commits should try to perform …\nReturns a snapshot which describes a current state of …\nSquashes the contents of a current delete set. This …\nLogical clock describing a current snapshot time.\nReturns state vector describing current state of the …\nReturns a state vector representing an upper bound of …\nReturns a StickyIndex equivalent to a human-readable <code>index</code>.\nReturns a collection of globally unique identifiers of sub …\nReturns a collection of globally unique identifiers of sub …\nReturns a collection of sub documents linked within the …\nReturns a collection of sub documents linked within the …\nSubscribes a callback parameter to a current Observer. …\nSubscribes a callback parameter to a current Observer. …\nReturns an iterator that can be used to traverse over the …\nA tag name of a current top-level XML node, eg. node …\nConverts current value into Any object equivalent that …\nConverts current value into stringified representation.\nCreates and returns a lightweight read-only transaction.\nCreates and returns a read-write capable transaction. This …\nCreates and returns a read-write capable transaction with …\nA tag name of a current top-level XML node, eg. node …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nCreates and returns a lightweight read-only transaction.\nCreates and returns a read-write capable transaction. This …\nCreates and returns a read-write capable transaction with …\nA binary which contains information about all inserted and …\nGenerate random v4 UUID. (See: …\nGenerate random v4 UUID. (See: …\nReturns an iterator that enables to traverse over all …\nCreates a new document with a specified <code>client_id</code>. It’s …\nCreates a new document with a configured set of Options.\nAny is an enum with a potentially associated value that is …\nAtomic reference holding a value, that’s supposed to be …\nReturns the argument unchanged.\nReturns a reference to current state hold by the AtomicRef…\nReturns a current state copy hold by the AtomicRef. Keep …\nCalls <code>U::from(self)</code>.\nCreates a new instance of AtomicRef. This call boxes …\nAtomically replaces currently stored value with a new one, …\nAtomically replaces currently stored value with a null, …\nUpdates stored value in place using provided function <code>f</code>, …\nCollection of consecutively inserted JSON-like primitive …\nBit flag used to identify [Item::GC].\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type …\nBit flag used to identify items with content of type […\nBit flag used to identify [Item::Skip].\nA BLOB data eg. images. Binaries are treated as a single …\nDescribes a consecutive range of updates (identified by …\nGlobally unique client identifier. No two active peers are …\nA marker for delete item data, which describes a number of …\nSub-document container. Contains weak reference to a …\nA single embedded JSON-like primitive value.\nPrelim container for types passed over to …\nFormatting attribute entry. Format attributes are not …\nBit flag used to tell if encoded item has left origin …\nBit flag used to tell if encoded item has a parent …\nBit flag used to tell if encoded item has right origin …\nBlock identifier, which allows to uniquely identify any …\nBlock defines a range of consecutive updates performed by …\nAn enum describing the type of a user data content stored …\nCollection of flags attached to an Item - most of them are …\nA raw Item pointer. As the underlying block doesn’t move …\nObsolete: collection of consecutively inserted stringified …\nMarker for destination location of move operation. Move is …\nA trait used for preliminary types, that can be inserted …\nType of a value to be returned as a result of inserting …\nA chunk of text, usually applied by collaborative text …\nA reference of a branch node. Branch nodes define a …\nEmpty type marker, which can be used by a Prelim trait …\nUnique identifier of a client.\nMonotonically incrementing sequence number, which informs …\nChecks if provided <code>id</code> fits inside of updates defined …\nChecks if provided <code>id</code> fits inside of boundaries defined by …\nEncodes a slice of a current ItemContent within an index …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads all contents stored in this item and returns them. …\nReturns a first value stored in a corresponding item.\nReturns a last value stored in a corresponding item.\nReturns a reference number used to determine a content …\nReturns a unique identifier of a first update contained by …\nID of the first update stored within current BlockRange …\nMethod called once an original item filled with content …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method is used to create initial content required in …\nChecks if item content can be considered countable. …\nChecks if item content can be considered countable. …\nChecks if current item is marked as deleted (tombstoned). …\nReturns an ID of the last element that can be considered a …\nReturns an ID of the last update fitting into the bounds …\nReturns a length of a block. For most situation it works …\nReturns a number of separate elements contained within …\nNumber of splittable updates stored within this BlockRange.\nReads a contents of current ItemContent into a given <code>buf</code>, …\nReturns a slice of a current BlockRange, which starts at a …\nTries to squash two item content structures together. …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nBranch describes a content of a complex Yrs data …\nAn unique logical identifier of a shared collection. Can …\nA wrapper around Branch cell, supplied with a bunch of …\nA descriptor used to reference to shared collections by …\nA logical reference used to represent a shared collection …\nA logical reference to a root-level shared collection. It …\nA length of an indexed sequence component of a current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts current branch data into a Value. It uses a type …\nReturns a length of an indexed sequence component of a …\nUnique identifier of root-level shared collection.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns an identifier of an underlying complex data type …\nCompute editable strings length and offset using UTF-8 …\nA Yrs document type. Documents are the most important …\nDetermines how string length and offsets of [Text]/[XmlText…\nConfiguration options of Doc instance.\nTrait implemented by Doc and shared types, used for …\nCompute editable strings length and offset using UTF-16 …\nIf a subdocument, automatically load document. If this is …\nGlobally unique client identifier. This value must be …\nAssociate this document with a collection. This only plays …\nReturns the argument unchanged.\nA globally unique identifier for this document.\nCalls <code>U::from(self)</code>.\nHow to we count offsets and lengths used in text …\nWhether the document should be synced by the provider now. …\nDetermines if transactions commits should try to perform …\nCreates and returns a lightweight read-only transaction.\nCreates and returns a read-write capable transaction. This …\nCreates and returns a read-write capable transaction with …\n<code>ToString::to_string</code>, but without panic on OOM.\nCreates and returns a lightweight read-only transaction.\nCreates and returns a read-write capable transaction. This …\nCreates and returns a read-write capable transaction with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead a variable length buffer.\nTake a slice of the next <code>len</code> bytes and advance the …\nRead float32 in big endian order\nRead float64 in big endian order\nRead BigInt64 in big endian order\nRead string of variable length.\nRead 2 bytes as unsigned integer\nRead 4 bytes as unsigned integer\nRead 4 bytes as unsigned integer in big endian order. …\nread BigUInt64 in big endian order\nRead a single byte.\nRead a single byte.\nRead unsigned integer with variable length.\nRead unsigned integer with variable length.\n<code>ToString::to_string</code>, but without panic on OOM.\nStruct which recognizes signed integer values. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true is stored number is a negative value …\nReturns true is stored number is a positive value.\nMaps contents of a Signed value container to a new data …\nReturns a stored value.\nWrite variable length buffer (binary content).\nWrite floating point number in 4 bytes\nWrite floating point number in 8 bytes\nWrite BigInt in 8 bytes in big endian order.\nWrite variable-length utf8 string\nWrite an unsigned integer (16bit)\nWrite an unsigned integer (32bit)\nWrite an unsigned integer (32bit) in big endian order …\nWrite BigUInt in 8 bytes in big endian order.\nWrite a variable length integer or unsigned integer.\nWrite a variable length integer or unsigned integer.\nIterator over ItemPtr references. By default it iterates …\nBlock iterator which acknowledges context of move …\nDoubleEndedIterator equivalent that can be supplied with …\nIterator equivalent that can be supplied with transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData structure used to handle publish/subscribe callbacks …\nData structure used to handle publish/subscribe callbacks …\nSubscription handle returned by Observer::subscribe …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Awareness class implements a simple shared state …\nApplying incoming Y-protocol awareness update has failed.\nA structure that represents an encodable state of an …\nIncoming Y-protocol message couldn’t be deserialized.\nA default implementation of y-sync Protocol.\nAn error type returned in response from y-sync Protocol.\nThrown in case of I/O errors.\nSince y-sync protocol enables for a multiple messages to …\nCustom dynamic kind of error, usually related to a warp …\nAn incoming Y-protocol authorization request has been …\nTrait implementing a y-sync protocol. The default …\nThrown whenever an unknown message tag has been sent.\nApplies an update (incoming from remote channel or …\nApplies an update (incoming from remote channel or …\nClears out a state of a current client (see: …\nReturns a globally unique client ID of an underlying Doc.\nReturns a state map of all of the clients tracked by …\nClient updates.\nReturns a read-only reference to an underlying Doc.\nReturns a read-write reference to an underlying Doc.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle authorization message. By default if reason for …\nReturns an AwarenessUpdate which is a serializable …\nReply to awareness query or just incoming AwarenessUpdate, …\nY-sync protocol sync-step-1 - given a StateVector of a …\nHandle reply for a sync-step-1 send from this replica …\nHandle continuous update send from the client. By default …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a JSON string state representation of a current …\nY-sync protocol enables to extend its own settings with …\nCreates a new instance of Awareness struct, which operates …\nReturns a channel receiver for an incoming awareness …\nClears out a state of a given client, effectively marking …\nSets a current Awareness instance state to a corresponding …\nTo be called whenever a new connection has been accepted. …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns a serializable update object which is …\nReturns a serializable update object which is …\nThe Awareness class implements a simple shared state …\nAn Awareness client state representation.\nA structure that represents an encodable state of an …\nA single client entry of an AwarenessUpdate. It consists …\nSummary of applying an AwarenessUpdate over …\nClient ID was not found in Awareness metadata.\nErrors generated by an Awareness struct methods.\nEvent type emitted by an Awareness struct.\nCollection of new clients that have been added to an …\nNew clients added as part of the update.\nReturns a collection of all clients that have been changed …\nReturns all the changed client IDs (added, updated and …\nGet iterator over all awarness clients.\nReturns an awareness state object, which contains the full …\nReturns an awareness update object, which contains ONLY …\nClient updates.\nTimestamp used to recognize which update is the latest one.\nReturns an underlying awareness Doc instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a serializable update object which is …\nReturns a metadata about particular client.\nReturns a string state representation of a particular …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nString with JSON payload containing user data.\nCollection of new clients that have been removed from …\nExisting clients that have been removed by the update.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns a serializable update object which is …\nCollection of new clients that have been updated within an …\nExisting clients that have been changed by the update.\nApplying incoming Y-protocol awareness update has failed.\nIncoming Y-protocol message couldn’t be deserialized.\nA default implementation of y-sync Protocol.\nAn error type returned in response from y-sync Protocol.\nThrown in case of I/O errors.\nTag id for Message::Auth.\nTag id for Message::Awareness.\nTag id for Message::AwarenessQuery.\nTag id for Message::Sync.\nTag id for SyncMessage::SyncStep1.\nTag id for SyncMessage::SyncStep2.\nTag id for SyncMessage::Update.\nSince y-sync protocol enables for a multiple messages to …\nCustom dynamic kind of error, usually related to a warp …\nAn incoming Y-protocol authorization request has been …\nTrait implementing a y-sync protocol. The default …\nThrown whenever an unknown message tag has been sent.\nHandle authorization message. By default if reason for …\nReturns an AwarenessUpdate which is a serializable …\nReply to awareness query or just incoming AwarenessUpdate, …\nY-sync protocol sync-step-1 - given a StateVector of a …\nHandle reply for a sync-step-1 send from this replica …\nHandle continuous update send from the client. By default …\nY-sync protocol enables to extend its own settings with …\nTo be called whenever a new connection has been accepted. …\nDetermines a change that resulted in adding a consecutive …\nAny value that it treated as a single element in it’s …\nAn alias for map of attributes used as formatting …\nA single change done over an array-component of shared …\nTrait implemented by all Y-types, allowing for observing …\nDetermines a change that resulted in removing a …\nA single change done over a text-like types: Text or […\nA single change done over a map-component of shared data …\nGeneralized wrapper around events fired by specialized …\nTrait implemented by shared types to display their …\nIndex segments are used to inform how to access child …\nInforms about a new value inserted under specified entry.\nDetermines a change that resulted in insertion of a piece …\nKey segments are used to inform how to access child shared …\nCollection used to store key-value entries in an unordered …\nA path describing nesting structure between shared …\nA single segment of a Path.\nDetermines a change that resulted in removing a …\nInforms about a removal of a corresponding entry - …\nDetermines a number of consecutive unchanged elements. …\nDetermines a number of consecutive unchanged characters. …\nA subset of SharedRef used to mark collaborative …\nCommon trait for shared collaborative collection types in …\nType ref identifier for an ArrayRef type.\nType ref identifier for a [DocRef] type.\nType ref identifier for a MapRef type.\nType ref identifier for a TextRef type.\nPlaceholder type ref identifier for non-specialized …\nType ref identifier for a [WeakRef] type.\nType ref identifier for a XmlElementRef type.\nType ref identifier for a XmlFragmentRef type. Used for …\nType ref identifier for a [XmlHookRef] type. Used for …\nType ref identifier for a XmlTextRef type.\nA shared data type used for collaborative text editing. It …\nInstance of a shared collection of undefined type. Usually …\nInforms about a change of old value (1st field) to a new …\nValue that can be returned by Yrs data types. This …\nInstance of an ArrayRef.\nSubdocument.\nInstance of a MapRef.\nInstance of a TextRef.\nInstance of a XmlElementRef.\nInstance of a XmlFragmentRef.\nInstance of a XmlTextRef.\nClears the contents of current map, effectively removing …\nChecks if an entry with given <code>key</code> can be found within …\nReturns an ordered sequence of formatted chunks, current …\nReturns the Delta representation of this YText type.\nWraps an existing piece of text within a range described …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a value stored under a given <code>key</code> within current …\nDisplays the content of a current collection in string …\nReturns a logical descriptor of a current shared …\nInserts a new <code>value</code> under given <code>key</code> into current map. …\nInserts a <code>chunk</code> of text at a given <code>index</code>. If <code>index</code> is <code>0</code>, …\nInserts an embed <code>content</code> at a given <code>index</code>.\nInserts an embed <code>content</code> of text at a given <code>index</code>. If <code>index</code>…\nInserts a <code>chunk</code> of text at a given <code>index</code>. If <code>index</code> is <code>0</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that enables to traverse over all …\nReturns an iterator that enables to traverse over all keys …\nReturns a number of entries stored within current map.\nReturns a number of characters visible in a current text …\nSubscribes a given callback to be triggered whenever …\nSubscribe a callback <code>f</code> for all events emitted by this and …\nReturns a path from root type to a shared type which …\nAppends a given <code>chunk</code> of text at the end of a current text …\nRemoves a stored within current map under a given <code>key</code>. …\nRemoves up to a <code>len</code> characters from a current text …\nCreate a logical collaborative collection reference to a …\nReturns a shared data types which triggered current Event.\nConverts all contents of a current type into a JSON-like …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns an iterator that enables to traverse over all …\nEvent generated by ArrayRef::observe method. Emitted …\nA preliminary array. It’s can be used to initialize an …\nA collection used to store data in an indexed sequence …\nReturns summary of changes made over corresponding ArrayRef…\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a value stored at a given <code>index</code>. Returns <code>None</code> …\nInserts a <code>value</code> at the given <code>index</code>. Inserting at index <code>0</code> …\nInserts multiple <code>values</code> at the given <code>index</code>. Inserting at …\nReturns a collection of block identifiers that have been …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator, that can be used to lazely traverse …\nReturns a number of elements stored in current array.\nMoves all elements found within <code>start</code>..<code>end</code> indexes range …\nMoves element found at <code>source</code> index into <code>target</code> index …\nReturns a path from root type down to ArrayRef instance …\nInserts given <code>value</code> at the end of the current array.\nInserts given <code>value</code> at the beginning of the current array.\nRemoves a single element at provided <code>index</code>.\nRemoves a range of elements from current array, starting …\nReturns a collection of block identifiers that have been …\nReturns an ArrayRef instance which emitted this event.\nAn unordered iterator over the keys of a Map.\nEvent generated by [Map::observe] method. Emitted during …\nA preliminary map. It can be used to early initialize the …\nCollection used to store key-value entries in an unordered …\nIterator over the values of a Map.\nClears the contents of current map, effectively removing …\nChecks if an entry with given <code>key</code> can be found within …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a value stored under a given <code>key</code> within current …\nInserts a new <code>value</code> under given <code>key</code> into current map. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that enables to traverse over all …\nReturns an iterator that enables to traverse over all keys …\nReturns a summary of key-value changes made over …\nReturns a number of entries stored within current map.\nReturns a path from root type down to Map instance which …\nRemoves a stored within current map under a given <code>key</code>. …\nReturns a Map instance which emitted this event.\nReturns an iterator that enables to traverse over all …\nA representation of an uniformly-formatted chunk of rich …\nEvent generated by [Text::observe] method. Emitted during …\nA preliminary text. It’s can be used to initialize a …\nA shared data type used for collaborative text editing. It …\nOptional formatting attributes wrapping inserted chunk of …\nReturns a summary of text changes made over corresponding …\nReturns an ordered sequence of formatted chunks, current …\nReturns the Delta representation of this YText type.\nWraps an existing piece of text within a range described …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts a <code>chunk</code> of text at a given <code>index</code>. If <code>index</code> is <code>0</code>, …\nInserted chunk of data. It can be (usually) piece of text, …\nInserts an embed <code>content</code> at a given <code>index</code>.\nInserts an embed <code>content</code> of text at a given <code>index</code>. If <code>index</code>…\nInserts a <code>chunk</code> of text at a given <code>index</code>. If <code>index</code> is <code>0</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a number of characters visible in a current text …\nReturns a path from root type down to Text instance which …\nAppends a given <code>chunk</code> of text at the end of a current text …\nRemoves up to a <code>len</code> characters from a current text …\nReturns a Text instance which emitted this event.\n<code>ToString::to_string</code>, but without panic on OOM.\nCustom user data attached to this chunk of data.\nIterator over the attributes (key-value pairs represented …\nAn iterator over [XmlElement] successors, working in a …\nA preliminary type that will be materialized into an …\nXML element data type. It represents an XML node, which …\nEvent generated by [XmlElement::observe] method. Emitted …\nA preliminary type that will be materialized into an …\nA XML fragment, which works as an untagged collection of …\n(Obsolete) an Yjs-compatible XML node used for nesting Map …\nAn return type from XML elements retrieval methods. It’s …\nTrait shared by preliminary types that can be used as XML …\nEvent generated by [XmlText::observe] method. Emitted …\nA preliminary type that will be materialized into an …\nA shared data type used for collaborative text editing, …\nReturns a collection of block identifiers that have been …\nReturns an unordered iterator over all attributes …\nTrue if any child XML nodes have been changed within …\nReturns a collection of block identifiers that have been …\nReturns a summary of text changes made over corresponding […\nReturns a summary of XML child nodes changed within …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a value stored at a given <code>index</code>. Returns <code>None</code> …\nReturns a value of an attribute given its <code>attr_name</code>. …\nInserts a <code>value</code> at the given <code>index</code>. Inserting at index <code>0</code> …\nInserts an attribute entry into current XML element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a summary of attribute changes made over …\nReturns a summary of attribute changes made over …\nReturns a number of elements stored in current array.\nTree walker used depth-first search to move over the xml …\nReturns a path from root type down to [XmlText] instance …\nReturns a path from root type down to [XmlElement] …\nInserts given <code>value</code> at the end of the current array.\nInserts given <code>value</code> at the beginning of the current array.\nRemoves a single element at provided <code>index</code>.\nRemoves an attribute recognized by an <code>attr_name</code> from a …\nRemoves a range of elements from current array, starting …\nReturns an iterator that can be used to traverse over the …\nReturns a [XmlText] instance which emitted this event.\nReturns a [XmlElement] instance which emitted this event.\nEnum which informs if correlated Event was produced as a …\nSet of options used to configure UndoManager.\nReferenced event was result of UndoManager::redo operation.\nA unit of work for the UndoManager. It contains a …\nReferenced event was result of UndoManager::undo operation.\nUndo manager is a structure used to perform undo/redo …\nAre there any redo steps available?\nAre there any undo steps available?\nUndo-/redo-able updates are grouped together in …\nCustom logic decider, that along with [tracked_origins] …\nReturns info about all changed shared collections.\nClears all StackItems stored within current UndoManager, …\nA set of identifiers of element deleted at part of the …\nRemoves an <code>origin</code> from the list of origins tracked by a …\nExtends a list of shared types tracked by current undo …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if given shared collection has changed in the scope …\nExtends a list of origins tracked by current undo manager …\nA set of identifiers of element inserted at part of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an enum informing if current update is result of …\nA custom user metadata that can be attached to a …\nCreates a new instance of the UndoManager working in a …\nRegisters a callback function to be called every time a …\nRegisters a callback function to be called every time an …\nRegisters a callback function to be called every time an …\nReturns a transaction origin related to this update …\nRedo’es last action previously undo’ed by current undo …\nUndoManager merges undo stack items if they were created …\nCustom clock function, that can be used to generate …\nList of origins tracked by corresponding UndoManager. If …\n<code>ToString::to_string</code>, but without panic on OOM.\nUndo last action tracked by current undo manager. Actions …\nCreates a new instance of the UndoManager working in a …\nA trait that can be implemented by any other type in order …\nTrait used by lib0 decoders. Natively lib0 encoding …\nVersion 1 of lib0 decoder.\nVersion 2 of lib0 decoder.\nHelper function for decoding 1st version of lib0 encoding.\nHelper function for decoding 2nd version of lib0 encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecode a JSON-like data type. It’s a complex type which …\nRead currently decoded client identifier.\nRead next DeleteSet clock value.\nRead the number of clients stored in encoded DeleteSet.\nRead info bit flags of a currently decoded [Block].\nDecode an embedded JSON string into Any struct. It’s a …\nRead key string.\nRead left origin of a currently decoded [Block].\nRead length parameter.\nRead bit flags determining type of parent of a currently …\nRead right origin of a currently decoded [Block].\nConsume a rest of the decoded buffer data and return it …\nRead type ref info of a currently decoded [Block] parent.\nReset the value of current delete set state.\nA trait that can be implemented by any other type in order …\nTrait used by lib0 encoders. Natively lib0 encoding …\nHelper function for encoding 1st version of lib0 encoding.\nHelper function for encoding 1st version of lib0 encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReset the state of currently encoded DeleteSet.\nConsume current encoder and return a binary with all data …\nEncode JSON-like data type. This is a complex structure …\nWrite currently encoded client identifier.\nWrite a clock value of currently encoded DeleteSet client.\nWrite a number of client entries used by currently encoded …\nWrite currently encoded [Block]’s info flags. These …\nEncode JSON-like data type as nested JSON string. This is …\nWrite a string key.\nWrite unique identifier of a currently encoded [Block]’s …\nWrite length parameter.\nWrite info flag about currently encoded [Block]’s …\nWrite unique identifier of a currently encoded [Block]’s …\nWrites type ref data of currently encoded [Block]’s …")