(function() {
    var type_impls = Object.fromEntries([["mf_collab_client",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-UndoManager%3CM%3E\" class=\"impl\"><a href=\"#impl-Debug-for-UndoManager%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mf_collab_client::yrs::UndoManager"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UndoManager%3CM%3E\" class=\"impl\"><a href=\"#impl-UndoManager%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.new\" class=\"fn\">new</a>&lt;T&gt;(doc: &amp;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.Doc.html\" title=\"struct mf_collab_client::yrs::Doc\">Doc</a>, scope: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a>&lt;M&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"mf_collab_client/yrs/branch/struct.Branch.html\" title=\"struct mf_collab_client::yrs::branch::Branch\">Branch</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new instance of the <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a> working in a <code>scope</code> of a particular shared\ntype and document. While it’s possible for undo manager to observe multiple shared types\n(see: <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.expand_scope\" title=\"method mf_collab_client::yrs::undo::UndoManager::expand_scope\">UndoManager::expand_scope</a>), it can only work with a single document at the same time.</p>\n</div></details><section id=\"method.doc\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.doc\" class=\"fn\">doc</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.Doc.html\" title=\"struct mf_collab_client::yrs::Doc\">Doc</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_options\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.with_options\" class=\"fn\">with_options</a>&lt;T&gt;(doc: &amp;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.Doc.html\" title=\"struct mf_collab_client::yrs::Doc\">Doc</a>, scope: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;T</a>, options: <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.Options.html\" title=\"struct mf_collab_client::yrs::undo::Options\">Options</a>) -&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a>&lt;M&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"mf_collab_client/yrs/branch/struct.Branch.html\" title=\"struct mf_collab_client::yrs::branch::Branch\">Branch</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new instance of the <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a> working in a <code>scope</code> of a particular shared\ntype and document. While it’s possible for undo manager to observe multiple shared types\n(see: <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.expand_scope\" title=\"method mf_collab_client::yrs::undo::UndoManager::expand_scope\">UndoManager::expand_scope</a>), it can only work with a single document at the same time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.observe_item_added\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.observe_item_added\" class=\"fn\">observe_item_added</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/struct.Subscription.html\" title=\"struct mf_collab_client::yrs::Subscription\">Subscription</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.TransactionMut.html\" title=\"struct mf_collab_client::yrs::TransactionMut\">TransactionMut</a>&lt;'_&gt;, &amp;mut <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.Event.html\" title=\"struct mf_collab_client::yrs::undo::Event\">Event</a>&lt;M&gt;) + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Registers a callback function to be called every time a new <a href=\"mf_collab_client/yrs/undo/struct.StackItem.html\" title=\"struct mf_collab_client::yrs::undo::StackItem\">StackItem</a> is created. This\nusually happens when a new update over an tracked shared type happened after capture timeout\nthreshold from the previous stack item occurence has been reached or <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.reset\" title=\"method mf_collab_client::yrs::undo::UndoManager::reset\">UndoManager::reset</a>\nhas been called.</p>\n<p>Returns a subscription object which - when dropped - will unregister provided callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.observe_item_updated\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.observe_item_updated\" class=\"fn\">observe_item_updated</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/struct.Subscription.html\" title=\"struct mf_collab_client::yrs::Subscription\">Subscription</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.TransactionMut.html\" title=\"struct mf_collab_client::yrs::TransactionMut\">TransactionMut</a>&lt;'_&gt;, &amp;mut <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.Event.html\" title=\"struct mf_collab_client::yrs::undo::Event\">Event</a>&lt;M&gt;) + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Registers a callback function to be called every time an existing <a href=\"mf_collab_client/yrs/undo/struct.StackItem.html\" title=\"struct mf_collab_client::yrs::undo::StackItem\">StackItem</a> has been\nextended as a result of updates from tracked types which happened before a capture timeout\nhas passed.</p>\n<p>Returns a subscription object which - when dropped - will unregister provided callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.observe_item_popped\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.observe_item_popped\" class=\"fn\">observe_item_popped</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/struct.Subscription.html\" title=\"struct mf_collab_client::yrs::Subscription\">Subscription</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.TransactionMut.html\" title=\"struct mf_collab_client::yrs::TransactionMut\">TransactionMut</a>&lt;'_&gt;, &amp;mut <a class=\"struct\" href=\"mf_collab_client/yrs/undo/struct.Event.html\" title=\"struct mf_collab_client::yrs::undo::Event\">Event</a>&lt;M&gt;) + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Registers a callback function to be called every time an existing <a href=\"mf_collab_client/yrs/undo/struct.StackItem.html\" title=\"struct mf_collab_client::yrs::undo::StackItem\">StackItem</a> has been\nremoved as a result of <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.undo\" title=\"method mf_collab_client::yrs::undo::UndoManager::undo\">UndoManager::undo</a> or <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.redo\" title=\"method mf_collab_client::yrs::undo::UndoManager::redo\">UndoManager::redo</a> method.</p>\n<p>Returns a subscription object which - when dropped - will unregister provided callback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expand_scope\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.expand_scope\" class=\"fn\">expand_scope</a>&lt;T&gt;(&amp;mut self, scope: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;T</a>)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"mf_collab_client/yrs/branch/struct.Branch.html\" title=\"struct mf_collab_client::yrs::branch::Branch\">Branch</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends a list of shared types tracked by current undo manager by a given <code>scope</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.include_origin\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.include_origin\" class=\"fn\">include_origin</a>&lt;O&gt;(&amp;mut self, origin: O)<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.Origin.html\" title=\"struct mf_collab_client::yrs::Origin\">Origin</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extends a list of origins tracked by current undo manager by given <code>origin</code>. Origin markers\ncan be assigned to updates executing in a scope of a particular transaction\n(see: <a href=\"mf_collab_client/yrs/struct.Doc.html#method.transact_mut_with\" title=\"method mf_collab_client::yrs::Doc::transact_mut_with\">Doc::transact_mut_with</a>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exclude_origin\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.exclude_origin\" class=\"fn\">exclude_origin</a>&lt;O&gt;(&amp;mut self, origin: O)<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"mf_collab_client/yrs/struct.Origin.html\" title=\"struct mf_collab_client::yrs::Origin\">Origin</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes an <code>origin</code> from the list of origins tracked by a current undo manager.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"mf_collab_client/yrs/doc/enum.TransactionAcqError.html\" title=\"enum mf_collab_client::yrs::doc::TransactionAcqError\">TransactionAcqError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Clears all <a href=\"mf_collab_client/yrs/undo/struct.StackItem.html\" title=\"struct mf_collab_client::yrs::undo::StackItem\">StackItem</a>s stored within current UndoManager, effectively resetting its state.</p>\n</div></details><section id=\"method.as_origin\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.as_origin\" class=\"fn\">as_origin</a>(&amp;self) -&gt; <a class=\"struct\" href=\"mf_collab_client/yrs/struct.Origin.html\" title=\"struct mf_collab_client::yrs::Origin\">Origin</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.reset\" class=\"fn\">reset</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p><a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html\" title=\"struct mf_collab_client::yrs::undo::UndoManager\">UndoManager</a> merges undo stack items if they were created withing the time gap smaller than\n<a href=\"mf_collab_client/yrs/undo/struct.Options.html#structfield.capture_timeout_millis\" title=\"field mf_collab_client::yrs::undo::Options::capture_timeout_millis\">Options::capture_timeout_millis</a>. You can call this method so that the next stack item won’t be\nmerged.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>yrs::{Doc, GetString, Text, Transact, UndoManager};\n<span class=\"kw\">let </span>doc = Doc::new();\n\n<span class=\"comment\">// without UndoManager::stop\n</span><span class=\"kw\">let </span>txt = doc.get_or_insert_text(<span class=\"string\">\"no-stop\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mgr = UndoManager::new(<span class=\"kw-2\">&amp;</span>doc, <span class=\"kw-2\">&amp;</span>txt);\ntxt.insert(<span class=\"kw-2\">&amp;mut </span>doc.transact_mut(), <span class=\"number\">0</span>, <span class=\"string\">\"a\"</span>);\ntxt.insert(<span class=\"kw-2\">&amp;mut </span>doc.transact_mut(), <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>);\nmgr.undo().unwrap();\ntxt.get_string(<span class=\"kw-2\">&amp;</span>doc.transact()); <span class=\"comment\">// =&gt; \"\" (note that 'ab' was removed)\n\n// with UndoManager::stop\n</span><span class=\"kw\">let </span>txt = doc.get_or_insert_text(<span class=\"string\">\"with-stop\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mgr = UndoManager::new(<span class=\"kw-2\">&amp;</span>doc, <span class=\"kw-2\">&amp;</span>txt);\ntxt.insert(<span class=\"kw-2\">&amp;mut </span>doc.transact_mut(), <span class=\"number\">0</span>, <span class=\"string\">\"a\"</span>);\nmgr.reset();\ntxt.insert(<span class=\"kw-2\">&amp;mut </span>doc.transact_mut(), <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>);\nmgr.undo().unwrap();\ntxt.get_string(<span class=\"kw-2\">&amp;</span>doc.transact()); <span class=\"comment\">// =&gt; \"a\" (note that only 'b' was removed)</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_undo\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.can_undo\" class=\"fn\">can_undo</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Are there any undo steps available?</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undo\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.undo\" class=\"fn\">undo</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"mf_collab_client/yrs/doc/enum.TransactionAcqError.html\" title=\"enum mf_collab_client::yrs::doc::TransactionAcqError\">TransactionAcqError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Undo last action tracked by current undo manager. Actions (a.k.a. <a href=\"mf_collab_client/yrs/undo/struct.StackItem.html\" title=\"struct mf_collab_client::yrs::undo::StackItem\">StackItem</a>s) are groups\nof updates performed in a given time range - they also can be separated explicitly by\ncalling <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.reset\" title=\"method mf_collab_client::yrs::undo::UndoManager::reset\">UndoManager::reset</a>.</p>\n<p>Successful execution returns a boolean value telling if an undo call has performed any changes.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This method requires an exclusive access to underlying document store. This means that\nno other transaction on that same document can be active while calling this method.\nOtherwise an error will be returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_redo\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.can_redo\" class=\"fn\">can_redo</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Are there any redo steps available?</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.redo\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#tymethod.redo\" class=\"fn\">redo</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"mf_collab_client/yrs/doc/enum.TransactionAcqError.html\" title=\"enum mf_collab_client::yrs::doc::TransactionAcqError\">TransactionAcqError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Redo’es last action previously undo’ed by current undo manager. Actions\n(a.k.a. <a href=\"mf_collab_client/yrs/undo/struct.StackItem.html\" title=\"struct mf_collab_client::yrs::undo::StackItem\">StackItem</a>s) are groups of updates performed in a given time range - they also can\nbe separated explicitly by calling <a href=\"mf_collab_client/yrs/undo/struct.UndoManager.html#method.reset\" title=\"method mf_collab_client::yrs::undo::UndoManager::reset\">UndoManager::reset</a>.</p>\n<p>Successful execution returns a boolean value telling if an undo call has performed any changes.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This method requires an exclusive access to underlying document store. This means that\nno other transaction on that same document can be active while calling this method.\nOtherwise an error will be returned.</p>\n</div></details></div></details>",0,"mf_collab_client::yrs::UndoManager"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[21845]}