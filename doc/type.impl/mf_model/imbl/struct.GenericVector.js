(function() {
    var type_impls = Object.fromEntries([["mf_model",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Add-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;) -&gt; &lt;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Concatenate two vectors.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details></div></details>","Add","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Clone-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Clone a vector.</p>\n<p>Time: O(1), or O(n) with a very small, bounded <em>n</em> for an inline vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Debug-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Default-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, A, P&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    des: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CA%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Extend%3CA%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;A&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add values to the end of a vector by consuming an iterator.</p>\n<p>Time: O(n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/core/iter\\traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/core/iter\\traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<A>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BA%5D%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-From%3C%26%5BA%5D%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[A]</a>&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[A]</a>) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a [A]>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26GenericVector%3C%26A,+P2%3E%3E-for-GenericVector%3COA,+P1%3E\" class=\"impl\"><a href=\"#impl-From%3C%26GenericVector%3C%26A,+P2%3E%3E-for-GenericVector%3COA,+P1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'s, 'a, A, OA, P1, P2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'s <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;'a A</a>, P2&gt;&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;OA, P1&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = OA&gt;,\n    OA: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;A&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P1: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,\n    P2: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: &amp;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>, P2&gt;) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;OA, P1&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'s GenericVector<&'a A, P2>>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Vec%3CA%3E%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-From%3C%26Vec%3CA%3E%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Create a vector from a <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\"><code>std::vec::Vec</code></a>.</p>\n<p>Time: O(n)</p>\n</div></details></div></details>","From<&'a Vec<A>>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BA;+N%5D%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-From%3C%5BA;+N%5D%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[A; N]</a>&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[A; N]</a>) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[A; N]>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CA%3E%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-From%3CVec%3CA%3E%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Create a vector from a <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\"><code>std::vec::Vec</code></a>.</p>\n<p>Time: O(n)</p>\n</div></details></div></details>","From<Vec<A>>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CA%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CA%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a vector from an iterator.</p>\n<p>Time: O(n)</p>\n</div></details></div></details>","FromIterator<A>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the value at index <code>index</code> in a\nvector.</p>\n<p>Returns <code>None</code> if the index is out of bounds.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"string\">\"Joe\"</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Robert\"</span>];\n{\n    <span class=\"kw\">let </span>robert = vec.get_mut(<span class=\"number\">2</span>).unwrap();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"Robert\"</span>, robert);\n    <span class=\"kw-2\">*</span>robert = <span class=\"string\">\"Bjarne\"</span>;\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"string\">\"Joe\"</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Bjarne\"</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.front_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.front_mut\" class=\"fn\">front_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the first element of a vector.</p>\n<p>If the vector is empty, <code>None</code> is returned.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.back_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.back_mut\" class=\"fn\">back_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the last element of a vector.</p>\n<p>If the vector is empty, <code>None</code> is returned.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.focus_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.focus_mut\" class=\"fn\">focus_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"mf_model/imbl/vector/enum.FocusMut.html\" title=\"enum mf_model::imbl::vector::FocusMut\">FocusMut</a>&lt;'_, A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a <a href=\"enum.FocusMut.html\"><code>FocusMut</code></a> for a vector.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"mf_model/imbl/vector/struct.IterMut.html\" title=\"struct mf_model::imbl::vector::IterMut\">IterMut</a>&lt;'_, A, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, A, P&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get a mutable iterator over a vector.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leaves_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.leaves_mut\" class=\"fn\">leaves_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"mf_model/imbl/vector/struct.ChunksMut.html\" title=\"struct mf_model::imbl::vector::ChunksMut\">ChunksMut</a>&lt;'_, A, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ChunksMut&lt;&#39;_, A, P&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get a mutable iterator over the leaf nodes of a vector.\nThis returns an iterator over the <a href=\"../chunk/struct.Chunk.html\"><code>Chunk</code>s</a> at the leaves of the\nRRB tree. These are useful for efficient parallelisation of work on\nthe vector, but should not be used for basic iteration.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.update\" class=\"fn\">update</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, value: A) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new vector with the value at index <code>index</code> updated.</p>\n<p>Panics if the index is out of bounds.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], vec.update(<span class=\"number\">1</span>, <span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.set\" class=\"fn\">set</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, value: A) -&gt; A</h4></section></summary><div class=\"docblock\"><p>Update the value at index <code>index</code> in a vector.</p>\n<p>Returns the previous value at the index.</p>\n<p>Panics if the index is out of bounds.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, j: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Swap the elements at indices <code>i</code> and <code>j</code>.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_front\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.push_front\" class=\"fn\">push_front</a>(&amp;mut self, value: A)</h4></section></summary><div class=\"docblock\"><p>Push a value to the front of a vector.</p>\n<p>Time: O(1)*</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\nvec.push_front(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_back\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.push_back\" class=\"fn\">push_back</a>(&amp;mut self, value: A)</h4></section></summary><div class=\"docblock\"><p>Push a value to the back of a vector.</p>\n<p>Time: O(1)*</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.push_back(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_front\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.pop_front\" class=\"fn\">pop_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the first element from a vector and return it.</p>\n<p>Time: O(1)*</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>), vec.pop_front());\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_back\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.pop_back\" class=\"fn\">pop_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the last element from a vector and return it.</p>\n<p>Time: O(1)*</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>), vec.pop_back());\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;)</h4></section></summary><div class=\"docblock\"><p>Append the vector <code>other</code> to the end of the current vector.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.append(<span class=\"macro\">vector!</span>[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retain only the elements specified by the predicate.</p>\n<p>Remove all elements for which the provided function <code>f</code>\nreturns false from the vector.</p>\n<p>Time: O(n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.split_at\" class=\"fn\">split_at</a>(\n    self,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>,\n) -&gt; (<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;, <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;)</h4></section></summary><div class=\"docblock\"><p>Split a vector at a given index.</p>\n<p>Split a vector at a given index, consuming the vector and\nreturning a pair of the left hand side and the right hand side\nof the split.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>(left, right) = vec.split_at(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], left);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], right);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Split a vector at a given index.</p>\n<p>Split a vector at a given index, leaving the left hand side in\nthe current vector and returning a new vector containing the\nright hand side.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>left = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>right = left.split_off(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], left);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], right);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.skip\" class=\"fn\">skip</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a vector with <code>count</code> elements removed from the\nstart of the current vector.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.take\" class=\"fn\">take</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a vector of the first <code>count</code> elements from the\ncurrent vector.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Truncate a vector to the given size.</p>\n<p>Discards all elements in the vector beyond the given length.\nDoes nothing if <code>len</code> is greater or equal to the length of the vector.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.slice\" class=\"fn\">slice</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extract a slice from a vector.</p>\n<p>Remove the elements from <code>start_index</code> until <code>end_index</code> in\nthe current vector and return the removed slice as a new\nvector.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, value: A)</h4></section></summary><div class=\"docblock\"><p>Insert an element into a vector.</p>\n<p>Insert an element at position <code>index</code>, shifting all elements\nafter it to the right.</p>\n<h6 id=\"performance-note\"><a class=\"doc-anchor\" href=\"#performance-note\">§</a>Performance Note</h6>\n<p>While <code>push_front</code> and <code>push_back</code> are heavily optimised\noperations, <code>insert</code> in the middle of a vector requires a\nsplit, a push, and an append. Thus, if you want to insert\nmany elements at the same location, instead of <code>insert</code>ing\nthem one by one, you should rather create a new vector\ncontaining the elements to insert, split the vector at the\ninsertion point, and append the left hand, the new vector and\nthe right hand in order.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; A</h4></section></summary><div class=\"docblock\"><p>Remove an element from a vector.</p>\n<p>Remove the element from position ‘index’, shifting all\nelements after it to the left, and return the removed element.</p>\n<h6 id=\"performance-note-1\"><a class=\"doc-anchor\" href=\"#performance-note-1\">§</a>Performance Note</h6>\n<p>While <code>pop_front</code> and <code>pop_back</code> are heavily optimised\noperations, <code>remove</code> in the middle of a vector requires a\nsplit, a pop, and an append. Thus, if you want to remove many\nelements from the same location, instead of <code>remove</code>ing them\none by one, it is much better to use <a href=\"#method.slice\"><code>slice</code></a>.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_ord\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.insert_ord\" class=\"fn\">insert_ord</a>(&amp;mut self, item: A)<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Insert an element into a sorted vector.</p>\n<p>Insert an element into a vector in sorted order, assuming the vector is\nalready in sorted order.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\nvec.insert_ord(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_ord_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.insert_ord_by\" class=\"fn\">insert_ord_by</a>&lt;F&gt;(&amp;mut self, item: A, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Insert an element into a sorted vector using a comparator function.</p>\n<p>Insert an element into a vector in sorted order using the given\ncomparator function, assuming the vector is already in sorted order.</p>\n<p>Note that the ordering used to sort the vector must logically match\nthe ordering in the comparison function provided to <code>insert_ord_by</code>.\nIncompatible definitions of the ordering won’t result in memory\nunsafety, but will likely result in out-of-order insertions.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];\nvec.insert_ord_by(<span class=\"number\">5</span>, |a, b| a.cmp(b).reverse());\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], vec);\n\n<span class=\"comment\">// Note that `insert_ord` does not work in this case because it uses\n// the default comparison function for the item type.\n</span>vec.insert_ord(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_ord_by_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.insert_ord_by_key\" class=\"fn\">insert_ord_by_key</a>&lt;B, F&gt;(&amp;mut self, item: A, f: F)<div class=\"where\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\"><p>Insert an element into a sorted vector where the comparison function\ndelegates to the Ord implementation for values calculated by a user-\nprovided function defined on the item type.</p>\n<p>This function assumes the vector is already sorted. If it isn’t sorted,\nthis function may insert the provided value out of order.</p>\n<p>Note that the ordering of the sorted vector must logically match the\n<code>PartialOrd</code> implementation of the type returned by the passed comparator\nfunction <code>f</code>. Incompatible definitions of the ordering won’t result in\nmemory unsafety, but will likely result in out-of-order insertions.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">type </span>A = (u8, <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vector&lt;A&gt; = <span class=\"macro\">vector!</span>[(<span class=\"number\">3</span>, <span class=\"string\">\"a\"</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"c\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"d\"</span>)];\n\n<span class=\"comment\">// For the sake of this example, let's say that only the second element\n// of the A tuple is important in the context of comparison.\n</span>vec.insert_ord_by_key((<span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>), |a| a.<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[(<span class=\"number\">3</span>, <span class=\"string\">\"a\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"c\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"d\"</span>)], vec);\n\n<span class=\"comment\">// Note that `insert_ord` does not work in this case because it uses\n// the default comparison function for the item type.\n</span>vec.insert_ord((<span class=\"number\">0</span>, <span class=\"string\">\"e\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[(<span class=\"number\">3</span>, <span class=\"string\">\"a\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"e\"</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"c\"</span>), (<span class=\"number\">0</span>, <span class=\"string\">\"d\"</span>)], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.sort\" class=\"fn\">sort</a>(&amp;mut self)<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort a vector.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];\nvec.sort();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], vec);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.sort_by\" class=\"fn\">sort_by</a>&lt;F&gt;(&amp;mut self, cmp: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort a vector using a comparator function.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];\nvec.sort_by(|left, right| left.cmp(right));\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], vec);</code></pre></div>\n</div></details></div></details>",0,"mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct an empty vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the length of a vector.</p>\n<p>Time: O(1)</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vector&lt;i64&gt; = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>, vec.len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Test whether a vector is empty.</p>\n<p>Time: O(1)</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec = <span class=\"macro\">vector!</span>[<span class=\"string\">\"Joe\"</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Robert\"</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false</span>, vec.is_empty());\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>, Vector::&lt;i64&gt;::new().is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_inline\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.is_inline\" class=\"fn\">is_inline</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Test whether a vector is currently inlined.</p>\n<p>Vectors small enough that their contents could be stored entirely inside\nthe space of <code>std::mem::size_of::&lt;GenericVector&lt;A, P&gt;&gt;()</code> bytes are stored inline on\nthe stack instead of allocating any chunks. This method returns <code>true</code> if\nthis vector is currently inlined, or <code>false</code> if it currently has chunks allocated\non the heap.</p>\n<p>This may be useful in conjunction with <a href=\"#method.ptr_eq\"><code>ptr_eq()</code></a>, which checks if\ntwo vectors’ heap allocations are the same, and thus will never return <code>true</code>\nfor inlined vectors.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ptr_eq\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.ptr_eq\" class=\"fn\">ptr_eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Test whether two vectors refer to the same content in memory.</p>\n<p>This uses the following rules to determine equality:</p>\n<ul>\n<li>If the two sides are references to the same vector, return true.</li>\n<li>If the two sides are single chunk vectors pointing to the same chunk, return true.</li>\n<li>If the two sides are full trees pointing to the same chunks, return true.</li>\n</ul>\n<p>This would return true if you’re comparing a vector to itself, or\nif you’re comparing a vector to a fresh clone of itself. The exception to this is\nif you’ve cloned an inline array (ie. an array with so few elements they can fit\ninside the space a <code>Vector</code> allocates for its pointers, so there are no heap allocations\nto compare).</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"mf_model/imbl/vector/struct.Iter.html\" title=\"struct mf_model::imbl::vector::Iter\">Iter</a>&lt;'_, A, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, A, P&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get an iterator over a vector.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leaves\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.leaves\" class=\"fn\">leaves</a>(&amp;self) -&gt; <a class=\"struct\" href=\"mf_model/imbl/vector/struct.Chunks.html\" title=\"struct mf_model::imbl::vector::Chunks\">Chunks</a>&lt;'_, A, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chunks&lt;&#39;_, A, P&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get an iterator over the leaf nodes of a vector.</p>\n<p>This returns an iterator over the <a href=\"../chunk/struct.Chunk.html\"><code>Chunk</code>s</a> at the leaves of the\nRRB tree. These are useful for efficient parallelisation of work on\nthe vector, but should not be used for basic iteration.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.focus\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.focus\" class=\"fn\">focus</a>(&amp;self) -&gt; <a class=\"enum\" href=\"mf_model/imbl/vector/enum.Focus.html\" title=\"enum mf_model::imbl::vector::Focus\">Focus</a>&lt;'_, A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a <a href=\"enum.Focus.html\"><code>Focus</code></a> for a vector.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the value at index <code>index</code> in a vector.</p>\n<p>Returns <code>None</code> if the index is out of bounds.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec = <span class=\"macro\">vector!</span>[<span class=\"string\">\"Joe\"</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Robert\"</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Robert\"</span>), vec.get(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, vec.get(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.front\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.front\" class=\"fn\">front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the first element of a vector.</p>\n<p>If the vector is empty, <code>None</code> is returned.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.head\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.head\" class=\"fn\">head</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the first element of a vector.</p>\n<p>If the vector is empty, <code>None</code> is returned.</p>\n<p>This is an alias for the <a href=\"#method.front\"><code>front</code></a> method.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.back\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.back\" class=\"fn\">back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the last element of a vector.</p>\n<p>If the vector is empty, <code>None</code> is returned.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.last\" class=\"fn\">last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get the last element of a vector.</p>\n<p>If the vector is empty, <code>None</code> is returned.</p>\n<p>This is an alias for the <a href=\"#method.back\"><code>back</code></a> method.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_of\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.index_of\" class=\"fn\">index_of</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Get the index of a given element in the vector.</p>\n<p>Searches the vector for the first occurrence of a given value,\nand returns the index of the value if it’s there. Otherwise,\nit returns <code>None</code>.</p>\n<p>Time: O(n)</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>), vec.index_of(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, vec.index_of(<span class=\"kw-2\">&amp;</span><span class=\"number\">31337</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Test if a given element is in the vector.</p>\n<p>Searches the vector for the first occurrence of a given value,\nand returns <code>true</code> if it’s there. If it’s nowhere to be found\nin the vector, it returns <code>false</code>.</p>\n<p>Time: O(n)</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vector!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>, vec.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false</span>, vec.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">31337</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Discard all elements from the vector.</p>\n<p>This leaves you with an empty vector, and all elements that\nwere previously inside it are dropped.</p>\n<p>Time: O(n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.binary_search_by\" class=\"fn\">binary_search_by</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary search a sorted vector for a given element using a comparator\nfunction.</p>\n<p>Assumes the vector has already been sorted using the same comparator\nfunction, eg. by using <a href=\"#method.sort_by\"><code>sort_by</code></a>.</p>\n<p>If the value is found, it returns <code>Ok(index)</code> where <code>index</code> is the index\nof the element. If the value isn’t found, it returns <code>Err(index)</code> where\n<code>index</code> is the index at which the element would need to be inserted to\nmaintain sorted order.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.binary_search\" class=\"fn\">binary_search</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary search a sorted vector for a given element.</p>\n<p>If the value is found, it returns <code>Ok(index)</code> where <code>index</code> is the index\nof the element. If the value isn’t found, it returns <code>Err(index)</code> where\n<code>index</code> is the index at which the element would need to be inserted to\nmaintain sorted order.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_by_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.binary_search_by_key\" class=\"fn\">binary_search_by_key</a>&lt;B, F&gt;(&amp;self, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;B</a>, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;A</a>) -&gt; B,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary search a sorted vector for a given element with a key extract\nfunction.</p>\n<p>Assumes the vector has already been sorted using the same key extract\nfunction, eg. by using <a href=\"#method.sort_by_key\"><code>sort_by_key</code></a>.</p>\n<p>If the value is found, it returns <code>Ok(index)</code> where <code>index</code> is the index\nof the element. If the value isn’t found, it returns <code>Err(index)</code> where\n<code>index</code> is the index at which the element would need to be inserted to\nmaintain sorted order.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unit\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"mf_model/imbl/struct.GenericVector.html#tymethod.unit\" class=\"fn\">unit</a>(a: A) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a vector with a single value.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec  = Vector::unit(<span class=\"number\">1337</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, vec.len());\n<span class=\"macro\">assert_eq!</span>(\n  vec.get(<span class=\"number\">0</span>),\n  <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1337</span>)\n);</code></pre></div>\n</div></details></div></details>",0,"mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Hash-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Index%3Cusize%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Get a reference to the value at index <code>index</code> in the vector.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = A</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<usize>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3Cusize%3E-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3Cusize%3E-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the value at index <code>index</code> in the\nvector.</p>\n<p>Time: O(log n)</p>\n</div></details></div></details>","IndexMut<usize>","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = A</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"mf_model/imbl/vector/struct.ConsumingIter.html\" title=\"struct mf_model::imbl::vector::ConsumingIter\">ConsumingIter</a>&lt;A, P&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Ord-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-PartialOrd-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    ser: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","mf_model::imbl::Vector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Sum-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(it: I) -&gt; <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum","mf_model::imbl::Vector"],["<section id=\"impl-Eq-for-GenericVector%3CA,+P%3E\" class=\"impl\"><a href=\"#impl-Eq-for-GenericVector%3CA,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"mf_model/imbl/struct.GenericVector.html\" title=\"struct mf_model::imbl::GenericVector\">GenericVector</a>&lt;A, P&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    P: <a class=\"trait\" href=\"mf_model/imbl/shared_ptr/trait.SharedPointerKind.html\" title=\"trait mf_model::imbl::shared_ptr::SharedPointerKind\">SharedPointerKind</a>,</div></h3></section>","Eq","mf_model::imbl::Vector"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[114933]}